# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'AddStaff.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
import sqlite3
global order_id
from fpdf import FPDF
import os
import sys
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.figure import Figure
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas





class Ui_LoginWindow(object):
    def Database(self):
        global conn, cursor
        conn = sqlite3.connect("projectdb.db")
        cursor = conn.cursor()
        cursor.execute(
            "CREATE TABLE IF NOT EXISTS `staff` (staff_id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, staff_username TEXT, staff_password TEXT, firstName TEXT, lastName TEXT, email TEXT)")
        cursor.execute(
            "CREATE TABLE IF NOT EXISTS 'orders' (order_number INTEGER, staff_id INTEGER, item_name TEXT, item_price INTEGER, item_tax float(4,2), item_category TEXT, item_quantity INTEGER, status TEXT, date DATE, PRIMARY KEY(order_number, item_name))"
        )
        cursor.execute(
            "CREATE TABLE IF NOT EXISTS `admin` (admin_id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, admin_username TEXT, admin_password TEXT)")

        cursor.execute(
            "SELECT * FROM `admin` WHERE `admin_username` = 'admin' AND `admin_password` = 'admin'")
        if cursor.fetchone() is None:
            cursor.execute(
                "INSERT INTO `admin` (admin_username, admin_password) VALUES('admin', 'admin')")
            conn.commit()
        cursor.execute("SELECT * FROM `staff`")
        if cursor.fetchone() is None:
            cursor.execute(
                "INSERT INTO `staff` (staff_username, staff_password, firstName, lastName, email) VALUES('FS', 'FS', 'FS', 'FS', 'FS')")
            conn.commit()

    def ActivateLogin(self):
        conn = sqlite3.connect("projectdb.db")
        username = self.LoginUser.toPlainText()
        pas = self.LoginPass.toPlainText()
        print(username, pas)

        if username == "" or pas == "":
            qm = QMessageBox()
            qm.setText("Username and Password cannot be blank!")
            qm.exec()
        else:

            admin = conn.execute("Select * from admin where admin_username = ? AND admin_password = ?",
                                 (str(username), str(pas)))
            admin = admin.fetchall()
            print(admin)

            staff = conn.execute("Select * from staff where staff_username = ? AND staff_password = ?",
                                 (str(username), str(pas)))
            staff = staff.fetchall()
            print(staff)

            conn.commit()

            if len(admin) == 1:
                Ui_AdminDashboard.dataVisualization(AdminDashboard_ui)
                Ui_AdminDashboard.loadData(AdminDashboard_ui)

                account_username = username

                qm = QMessageBox()
                qm.setText("Logged in as Admin!")
                qm.exec()
                AdminDashboard.show()
                LoginWindow.hide()

            elif len(staff) == 1:
                qm = QMessageBox()
                qm.setText("Logged in as Staff!")
                qm.exec()

                OrderConfirmation.show()
                LoginWindow.hide()
            else:
                qm = QMessageBox()
                qm.setText("Wrong Password or Username!")
                qm.exec()
                self.LoginUser.clear()
                self.LoginPass.clear()

            self.LoginUser.clear()
            self.LoginPass.clear()
            conn.close()

    def setupUi(self, LoginWindow):
        self.Database()
        LoginWindow.setObjectName("LoginWindow")
        LoginWindow.resize(1000, 720)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(LoginWindow.sizePolicy().hasHeightForWidth())
        LoginWindow.setSizePolicy(sizePolicy)
        LoginWindow.setStyleSheet("QPushButton {\n"
"background-color: rgb(159, 53, 33);\n"
"font: 63 12pt \"Segoe UI Semibold\";\n"
"color: rgb(255, 255, 255);\n"
"border-color: rgb(255, 255, 255);\n"
"}")
        self.centralwidget = QtWidgets.QWidget(LoginWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setMinimumSize(QtCore.QSize(1000, 720))
        self.centralwidget.setObjectName("centralwidget")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(0, 0, 1001, 751))
        palette = QtGui.QPalette()
        self.frame.setPalette(palette)
        self.frame.setAutoFillBackground(True)
        self.frame.setStyleSheet("")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.BGImage = QtWidgets.QLabel(self.frame)
        self.BGImage.setGeometry(QtCore.QRect(0, 0, 1001, 720))
        self.BGImage.setStyleSheet("background-image: url(:/LoginBG/img/bg/LoginBG.png);")
        self.BGImage.setObjectName("BGImage")
        self.LoginTitle = QtWidgets.QLabel(self.frame)
        self.LoginTitle.setGeometry(QtCore.QRect(540, 110, 411, 91))
        self.LoginTitle.setStyleSheet("font: 87 26pt \"Segoe UI\";")
        self.LoginTitle.setObjectName("LoginTitle")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.frame)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(540, 430, 431, 80))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.ButtonBox = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.ButtonBox.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.ButtonBox.setContentsMargins(0, 0, 0, 0)
        self.ButtonBox.setObjectName("ButtonBox")
        self.LoginButton = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.LoginButton.setMinimumSize(QtCore.QSize(50, 40))
        self.LoginButton.setStyleSheet("")
        self.LoginButton.setObjectName("LoginButton")
        self.ButtonBox.addWidget(self.LoginButton)
        self.LoginUser = QtWidgets.QTextEdit(self.frame)
        self.LoginUser.setGeometry(QtCore.QRect(540, 280, 429, 56))
        self.LoginUser.setBaseSize(QtCore.QSize(429, 46))
        self.LoginUser.setStyleSheet("background-color: rgb(159, 53, 33);\n"
"font: 18pt \"MS Shell Dlg 2\";\n"
"color: white;\n"
"border-color: rgb(255, 255, 255);\n"
"")
        self.LoginUser.setObjectName("LoginUser")
        self.LoginPass = QtWidgets.QTextEdit(self.frame)

        self.LoginPass.setGeometry(QtCore.QRect(540, 358, 429, 51))
        self.LoginPass.setStyleSheet("background-color: rgb(159, 53, 33);\n"
"font: 18pt \"MS Shell Dlg 2\";\n"
"color: white;\n"
"border-color: rgb(255, 255, 255);\n"
"")
        self.LoginPass.setObjectName("LoginPass")

        LoginWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(LoginWindow)
        QtCore.QMetaObject.connectSlotsByName(LoginWindow)
        self.LoginButton.clicked.connect(self.ActivateLogin)




    def retranslateUi(self, LoginWindow):
        _translate = QtCore.QCoreApplication.translate
        LoginWindow.setWindowTitle(_translate("LoginWindow", "MainWindow"))
        self.BGImage.setText(_translate("LoginWindow", "`"))
        self.LoginTitle.setText(_translate("LoginWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:36pt; font-weight:600; color:#ffffff;\">Login Page</span></p></body></html>"))
        self.LoginButton.setText(_translate("LoginWindow", "Login"))
        self.LoginUser.setHtml(_translate("LoginWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:18pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" color:#ffffff;\">Username</span></p></body></html>"))
        self.LoginPass.setHtml(_translate("LoginWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:18pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" color:#ffffff;\">Password</span></p></body></html>"))
import background_rc



class Ui_AddStaffWindow(object):

    def activateClearButton(self):
        print("Helloooooo")
        self.UserName.clear()
        self.FirstName.clear()
        self.Password.clear()
        self.RepeatPassword.clear()
        self.Email.clear()
        self.LastName.clear()

    def Database(self):
        global conn, cursor
        conn = sqlite3.connect("projectdb.db")
        cursor = conn.cursor()
        cursor.execute(
            "CREATE TABLE IF NOT EXISTS `staff` (staff_id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, staff_username TEXT, staff_password TEXT, firstName TEXT, lastName TEXT, email TEXT)")
        cursor.execute(
            "CREATE TABLE IF NOT EXISTS 'orders' (order_number INTEGER, staff_id INTEGER, item_name TEXT, item_price INTEGER, item_tax float(4,2), item_category TEXT, item_quantity INTEGER, status TEXT, date DATE, PRIMARY KEY(order_number, item_name))"
        )
        cursor.execute(
            "CREATE TABLE IF NOT EXISTS `admin` (admin_id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, admin_username TEXT, admin_password TEXT)")

        cursor.execute(
            "SELECT * FROM `admin` WHERE `admin_username` = 'admin' AND `admin_password` = 'admin'")
        if cursor.fetchone() is None:
            cursor.execute(
                "INSERT INTO `admin` (admin_username, admin_password) VALUES('admin', 'admin')")
            conn.commit()
        cursor.execute("SELECT * FROM `staff`")
        if cursor.fetchone() is None:
            cursor.execute(
                "INSERT INTO `staff` (staff_username, staff_password, firstName, lastName, email) VALUES('FS', 'FS', 'FS', 'FS', 'FS')")
            conn.commit()

    def activateSubmitButton(self):
        self.Database()
        firsname = self.FirstName.toPlainText()
        lastname = self.LastName.toPlainText()
        userName = self.UserName.toPlainText()
        Email = self.Email.toPlainText()
        passeord = self.Password.toPlainText()
        repassword = self.RepeatPassword.toPlainText()

        if passeord != repassword:
            qm = QMessageBox()
            qm.setText("Password didnt match!")
            qm.exec()
        elif firsname == "" or lastname == "" or userName == "" or Email == "" or passeord == "":
            qm = QMessageBox()
            qm.setText("Fields cannot be left blank!")
            qm.exec()
        else:
            conn.execute(
                "Insert into staff (firstName,lastName,staff_username,email,staff_password) VALUES (?,?,?,?,?)",
                (firsname, lastname, userName, Email, passeord))
            qm = QMessageBox()
            qm.setText("Data Inserted!")
            qm.exec()
            self.activateClearButton()
            conn.commit()
            conn.close()

    def setupUi(self, AddStaffWindow):
        self.Database()
        AddStaffWindow.setObjectName("AddStaffWindow")
        AddStaffWindow.resize(1126, 740)
        AddStaffWindow.setStyleSheet("QPushButton {\n"
"background-color:#FF9A00;\n"
"font: 63 12pt \"Segoe UI Semibold\";\n"
"color: rgb(255, 255, 255);\n"
"}")
        self.centralwidget = QtWidgets.QWidget(AddStaffWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.BGImage = QtWidgets.QLabel(self.centralwidget)
        self.BGImage.setGeometry(QtCore.QRect(0, 0, 1100, 740))
        self.BGImage.setStyleSheet("background-image: url(:/AddStaff/img/bg/AddStaff.png);")
        self.BGImage.setText("")
        self.BGImage.setObjectName("BGImage")
        self.UserName = QtWidgets.QTextEdit(self.centralwidget)
        self.UserName.setGeometry(QtCore.QRect(156, 380, 331, 55))
        self.UserName.setStyleSheet("background-color: rgb(159, 53, 33);\n"
"font: 18pt \"MS Shell Dlg 2\";\n"
"color: white;\n"
"border-color: rgb(255, 255, 255);\n"
"")
        self.UserName.setObjectName("UserName")
        self.FirstName = QtWidgets.QTextEdit(self.centralwidget)
        self.FirstName.setGeometry(QtCore.QRect(159, 243, 331, 55))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.FirstName.sizePolicy().hasHeightForWidth())
        self.FirstName.setSizePolicy(sizePolicy)
        self.FirstName.setBaseSize(QtCore.QSize(429, 46))
        self.FirstName.setStyleSheet("background-color: rgb(159, 53, 33);\n"
"font: 18pt \"MS Shell Dlg 2\";\n"
"color: white;\n"
"border-color: rgb(255, 255, 255);\n"
"")
        self.FirstName.setObjectName("FirstName")
        self.Password = QtWidgets.QTextEdit(self.centralwidget)
        self.Password.setGeometry(QtCore.QRect(159, 517, 331, 55))
        self.Password.setStyleSheet("background-color: rgb(159, 53, 33);\n"
"font: 18pt \"MS Shell Dlg 2\";\n"
"color: white;\n"
"border-color: rgb(255, 255, 255);\n"
"")
        self.Password.setObjectName("Password")
        self.RepeatPassword = QtWidgets.QTextEdit(self.centralwidget)
        self.RepeatPassword.setGeometry(QtCore.QRect(619, 517, 331, 55))
        self.RepeatPassword.setStyleSheet("background-color: rgb(159, 53, 33);\n"
"font: 18pt \"MS Shell Dlg 2\";\n"
"color: white;\n"
"border-color: rgb(255, 255, 255);\n"
"")
        self.RepeatPassword.setObjectName("RepeatPassword")
        self.LastName = QtWidgets.QTextEdit(self.centralwidget)
        self.LastName.setGeometry(QtCore.QRect(619, 243, 331, 55))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.LastName.sizePolicy().hasHeightForWidth())
        self.LastName.setSizePolicy(sizePolicy)
        self.LastName.setBaseSize(QtCore.QSize(429, 46))
        self.LastName.setStyleSheet("background-color: rgb(159, 53, 33);\n"
"font: 18pt \"MS Shell Dlg 2\";\n"
"color: white;\n"
"border-color: rgb(255, 255, 255);\n"
"")
        self.LastName.setObjectName("LastName")
        self.Email = QtWidgets.QTextEdit(self.centralwidget)
        self.Email.setGeometry(QtCore.QRect(616, 380, 331, 55))
        self.Email.setStyleSheet("background-color: rgb(159, 53, 33);\n"
"font: 18pt \"MS Shell Dlg 2\";\n"
"color: white;\n"
"border-color: rgb(255, 255, 255);\n"
"")
        self.Email.setObjectName("Email")
        self.layoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget.setGeometry(QtCore.QRect(310, 630, 551, 51))
        self.layoutWidget.setObjectName("layoutWidget")
        self.HZLayout = QtWidgets.QHBoxLayout(self.layoutWidget)
        self.HZLayout.setContentsMargins(0, 0, 0, 0)
        self.HZLayout.setSpacing(50)
        self.HZLayout.setObjectName("HZLayout")
        self.Submit = QtWidgets.QPushButton(self.layoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Submit.sizePolicy().hasHeightForWidth())
        self.Submit.setSizePolicy(sizePolicy)
        self.Submit.setObjectName("Submit")
        self.HZLayout.addWidget(self.Submit)
        self.Clear = QtWidgets.QPushButton(self.layoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Clear.sizePolicy().hasHeightForWidth())
        self.Clear.setSizePolicy(sizePolicy)
        self.Clear.setObjectName("Clear")
        self.HZLayout.addWidget(self.Clear)
        self.Clear.raise_()
        self.Submit.raise_()
        self.BGImage.raise_()
        self.layoutWidget.raise_()
        self.UserName.raise_()
        self.FirstName.raise_()
        self.Password.raise_()
        self.RepeatPassword.raise_()
        self.Email.raise_()
        self.LastName.raise_()
        AddStaffWindow.setCentralWidget(self.centralwidget)


        self.retranslateUi(AddStaffWindow)
        QtCore.QMetaObject.connectSlotsByName(AddStaffWindow)

        self.Submit.clicked.connect(self.activateSubmitButton)
        self.Clear.clicked.connect(self.activateClearButton)

    def retranslateUi(self, AddStaffWindow):
        _translate = QtCore.QCoreApplication.translate
        AddStaffWindow.setWindowTitle(_translate("AddStaffWindow", "MainWindow"))
        self.UserName.setHtml(_translate("AddStaffWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:18pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.UserName.setPlaceholderText(_translate("AddStaffWindow", "Username"))
        self.FirstName.setHtml(_translate("AddStaffWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:18pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.FirstName.setPlaceholderText(_translate("AddStaffWindow", "First Name"))
        self.Password.setHtml(_translate("AddStaffWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:18pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.Password.setPlaceholderText(_translate("AddStaffWindow", "Password"))
        self.RepeatPassword.setHtml(_translate("AddStaffWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:18pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.RepeatPassword.setPlaceholderText(_translate("AddStaffWindow", "Repeat Password"))
        self.LastName.setHtml(_translate("AddStaffWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:18pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.LastName.setPlaceholderText(_translate("AddStaffWindow", "Last Name"))
        self.Email.setHtml(_translate("AddStaffWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:18pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.Email.setPlaceholderText(_translate("AddStaffWindow", "Email"))
        self.Submit.setText(_translate("AddStaffWindow", "Submit"))
        self.Clear.setText(_translate("AddStaffWindow", "Clear"))
import background_rc




class Ui_ManagStaffWindow(object):



    def UpdateStaffRecords(self):
        db = sqlite3.connect("projectdb.db")

        if not self.StaffTable.selectedItems():
            qm = QMessageBox()
            qm.setText("Select a row that you brought changes!")
            qm.exec()
        else:
            items = self.StaffTable.selectedItems()
            mylist = []
            for x in items:
                mylist.append(x.text())
                id = mylist[0]
            newData = self.StaffTable.selectedItems()
            mynewlist = []
            for y in newData:
                mynewlist.append(y.text())
            print(mynewlist)
            idNum = int(mynewlist[0])
            userNmae = mynewlist[1]
            password = mynewlist[2]
            firstName = mynewlist[3]
            lastname = mynewlist[4]
            emaill = mynewlist[5]

            db.execute("UPDATE staff set staff_username = ?, staff_password =?, firstName =? , lastName =?, email=? Where staff_id = ?",(userNmae,password,firstName,lastname,emaill,idNum))
            db.commit()
            db.close()
            qm = QMessageBox()
            qm.setText("Row Updated!")
            qm.exec()



    def activateDeleteFuntion(self):
        db = sqlite3.connect("projectdb.db")
        row = self.StaffTable.selectedItems()
        mylsit = []
        for y in row:
            mylsit.append(y.text())
            id = mylsit[0]
        if not self.StaffTable.selectedItems():
            qm = QMessageBox()
            qm.setText("select a row to delete!")
            qm.exec()
        else:
            db.execute("DELETE FROM staff WHERE staff_id = ?", (id,))
            qm = QMessageBox()
            qm.setText("Row deleted!")
            qm.exec()
            db.commit()
            db.close()

    def swichtoaddstaffwindow(self):
        AddStaffWindow.show()

    def actiavteStaffTable(self):
        db = sqlite3.connect("projectdb.db")
        result = db.execute("select staff_id, staff_username, staff_password, firstName, lastName, email from staff")
        result = result.fetchall()
        # print(result)

        for rowNum, rowData in enumerate(result):
            # print(rowNum, rowData)
            self.StaffTable.setRowCount(rowNum + 1)
            for colNum, colData in enumerate(rowData):
                # print(colNum, colData)
                self.StaffTable.setItem(rowNum, colNum, QtWidgets.QTableWidgetItem(str(colData)))

        db.commit()
        db.close()
    def setupUi(self, ManagStaffWindow):
        ManagStaffWindow.setObjectName("ManagStaffWindow")
        ManagStaffWindow.resize(1101, 730)
        ManagStaffWindow.setStyleSheet("QPushButton {\n"
"background-color: #FF9A00;\n"
"font: 63 12pt \"Segoe UI Semibold\";\n"
"color: rgb(255, 255, 255);\n"
"border-color: rgb(255, 255, 255);\n"
"}")
        self.centralwidget = QtWidgets.QWidget(ManagStaffWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(50, 189, 991, 511))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.VTLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.VTLayout.setContentsMargins(0, 0, 0, 0)
        self.VTLayout.setObjectName("VTLayout")
        self.StaffTable = QtWidgets.QTableWidget(self.verticalLayoutWidget)
        self.StaffTable.setStyleSheet("\n"
"QHeaderView // The entire area of ​​the QTableWidget header\n"
"{\n"
" Background:transparent; // The background color of the entire title header area\n"
"}\n"
"QHeaderView::section // Title header Each individual title area\n"
"{\n"
" Font-size:14px; // The font size of each title\n"
" Font-family: \"Microsoft YaHei\"; // Font type of each title\n"
" Color: #FFFFFF; // The font color of each title\n"
" \n"
" Background:#60669B; // Background color of each title area\n"
"Border:none; // The border of each title area\n"
" Text-align:left; // Alignment of each title (seemingly unusable). It is recommended to use tableWidget->horizontalHeader()->setDefaultAlignment(Qt::AlignLeft | Qt::AlignVCenter)\n"
" \n"
" \n"
" Min-height: 49px; // height of the title area\n"
"    max-height:49px;               //\n"
" \n"
" Margin-left:0px; // The margin of each title area\n"
" Padding-left: 0px; padding for each title area\n"
"}\n"
" \n"
"QTableWidget // The entire table widget\n"
"{\n"
" Background: #FFFFFF; // The background color of the entire table control\n"
" Border:none; // The entire table control border\n"
" \n"
" Font-size: 12px; // All font sizes\n"
" Font-family:\"Microsoft YaHei\"; // All fonts family\n"
" Color:#666666; // All font colors\n"
"}\n"
" \n"
"QTableWidget:: item // each cell\n"
"{\n"
" Border-bottom:1px solid #EEF1F7; // Only display the bottom border of each cell\n"
"}\n"
" \n"
"QTableWidget::item::selected // Each cell is selected\n"
"{\n"
" Color:red; font color when each cell is selected\n"
" Background: #EFF4FF; background color when each cell is selected\n"
"}\n"
" \n"
"QScrollBar::handle:vertical // Vertical scroll bar handle\n"
"{\n"
" Background: rgba(255,255,255,20%); // background color of vertical scroll bar handle\n"
" Border: 0px solid grey; // Vertical scroll bar handle border\n"
" Border-radius: 3px; // Vertical scroll bar handle rounded corners\n"
" Width: 8px; // Vertical scroll bar handle width\n"
"}\n"
"QScrollBar::vertical // Vertical scroll bar area\n"
"{\n"
" Border-width: 1px; // Vertical scroll bar area Border width\n"
" Border-style: solid; // Vertical scroll bar area Border type\n"
" Border-color: rgba(255, 255, 255, 10%); // Vertical scroll bar area border color\n"
" Width: 8px; Width of vertical scroll bar area\n"
" Margin:0px 0px 0px 0px; // Vertical scroll bar area margin\n"
" Border-radius: 3px; // Vertical scroll bar area rounded corners\n"
"}\n"
"QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical // vertical scroll bar handle upper and lower area (area not occupied by handle)\n"
"{\n"
" Background: rgba(255,255,255,10%); // Background color of the upper and lower areas of the vertical scroll bar handle\n"
"}\n"
"QScollBar::add-line:vertical, QScrollBar::sub-line:vertical // The top and bottom areas of the vertical scroll bar\n"
"{\n"
" Background:transparent; background color of the top and bottom areas of the vertical scroll bar\n"
"}")
        self.StaffTable.setObjectName("StaffTable")
        self.StaffTable.setColumnCount(6)
        self.StaffTable.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.StaffTable.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.StaffTable.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.StaffTable.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.StaffTable.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.StaffTable.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.StaffTable.setHorizontalHeaderItem(5, item)
        self.VTLayout.addWidget(self.StaffTable)
        spacerItem = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.VTLayout.addItem(spacerItem)
        self.HZLayout = QtWidgets.QHBoxLayout()
        self.HZLayout.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.HZLayout.setSpacing(20)
        self.HZLayout.setObjectName("HZLayout")
        self.AddBtn = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.AddBtn.setMinimumSize(QtCore.QSize(0, 40))
        self.AddBtn.setObjectName("AddBtn")
        self.HZLayout.addWidget(self.AddBtn)
        self.EditBtn = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.EditBtn.setMinimumSize(QtCore.QSize(0, 40))
        self.EditBtn.setObjectName("EditBtn")
        self.HZLayout.addWidget(self.EditBtn)
        self.RefreshBtn = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.RefreshBtn.setMinimumSize(QtCore.QSize(0, 40))
        self.RefreshBtn.setObjectName("RefreshBtn")
        self.HZLayout.addWidget(self.RefreshBtn)
        self.DeleteBtn = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.DeleteBtn.setMinimumSize(QtCore.QSize(0, 40))
        self.DeleteBtn.setObjectName("DeleteBtn")
        self.HZLayout.addWidget(self.DeleteBtn)
        self.VTLayout.addLayout(self.HZLayout)
        self.BGImage = QtWidgets.QLabel(self.centralwidget)
        self.BGImage.setGeometry(QtCore.QRect(0, 0, 1100, 740))
        self.BGImage.setStyleSheet("background-image: url(:/ManageStaffBG/img/bg/ManageStaff.png);")
        self.BGImage.setText("")
        self.BGImage.setObjectName("BGImage")
        self.BGImage.raise_()
        self.verticalLayoutWidget.raise_()
        ManagStaffWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(ManagStaffWindow)
        QtCore.QMetaObject.connectSlotsByName(ManagStaffWindow)
        self.AddBtn.clicked.connect(self.swichtoaddstaffwindow)
        self.EditBtn.clicked.connect(self.UpdateStaffRecords)
        self.actiavteStaffTable()
        self.DeleteBtn.clicked.connect(self.activateDeleteFuntion)
        self.RefreshBtn.clicked.connect(self.actiavteStaffTable)


    def retranslateUi(self, ManagStaffWindow):
        _translate = QtCore.QCoreApplication.translate
        ManagStaffWindow.setWindowTitle(_translate("ManagStaffWindow", "MainWindow"))
        item = self.StaffTable.horizontalHeaderItem(0)
        item.setText(_translate("ManagStaffWindow", "ID"))
        item = self.StaffTable.horizontalHeaderItem(1)
        item.setText(_translate("ManagStaffWindow", "User Name"))
        item = self.StaffTable.horizontalHeaderItem(2)
        item.setText(_translate("ManagStaffWindow", "Password"))
        item = self.StaffTable.horizontalHeaderItem(3)
        item.setText(_translate("ManagStaffWindow", "First Name"))
        item = self.StaffTable.horizontalHeaderItem(4)
        item.setText(_translate("ManagStaffWindow", "Last Name "))
        item = self.StaffTable.horizontalHeaderItem(5)
        item.setText(_translate("ManagStaffWindow", "Email"))
        self.AddBtn.setText(_translate("ManagStaffWindow", "Add Entry"))
        self.EditBtn.setText(_translate("ManagStaffWindow", "Edit Entry"))
        self.RefreshBtn.setText(_translate("ManagStaffWindow", "Refresh List"))
        self.DeleteBtn.setText(_translate("ManagStaffWindow", "Delete Entry"))
import background_rc




class Ui_OrderPage(object):
    def Database(self):
        global conn, cursor
        conn = sqlite3.connect("projectdb.db")
        cursor = conn.cursor()
        cursor.execute(
            "CREATE TABLE IF NOT EXISTS `staff` (staff_id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, staff_username TEXT, staff_password TEXT, firstName TEXT, lastName TEXT, email TEXT)")
        cursor.execute(
            "CREATE TABLE IF NOT EXISTS 'orders' (order_number INTEGER, staff_id INTEGER, item_name TEXT, item_price INTEGER, item_tax float(4,2), item_category TEXT, item_quantity INTEGER, status TEXT, date DATE, PRIMARY KEY(order_number, item_name))"
        )
        cursor.execute(
            "CREATE TABLE IF NOT EXISTS `admin` (admin_id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, admin_username TEXT, admin_password TEXT)")

        cursor.execute("SELECT * FROM `admin` WHERE `admin_username` = 'admin' AND `admin_password` = 'admin'")
        if cursor.fetchone() is None:
            cursor.execute("INSERT INTO `admin` (admin_username, admin_password) VALUES('admin', 'admin')")
            conn.commit()
        cursor.execute("SELECT * FROM `staff`")
        if cursor.fetchone() is None:
            cursor.execute(
                "INSERT INTO `staff` (staff_username, staff_password, firstName, lastName, email) VALUES('FS', 'FS', 'FS', 'FS', 'FS')")
            conn.commit()
    def clearData(self):
        self.CartTable.setRowCount(0)
    def submitData(self):
        products = self.CartTable.rowCount()
        if products == 0:
            qm = QMessageBox()
            qm.setText("Please add some items to the cart to order")
            qm.exec()
        else:

            self.Database()
            cursor.execute(
                "SELECT MAX(order_number) FROM orders;"
            )
            maxOrderNumber2 = cursor.fetchall()[0][0]
            if isinstance(maxOrderNumber2, int) is False:
                maxOrderNumber2 = 0
            else:
                maxOrderNumber2 = int(maxOrderNumber2)
            currentOrderNumber2 = maxOrderNumber2 + 1
            cursor.execute(
                "SELECT date('now');"
            )
            date = cursor.fetchall()[0][0]
            rows = 0
            for individualProduct in range(products):
                cursor.execute(
                    "INSERT INTO orders (order_number, item_name, item_price, item_tax, item_category, item_quantity, status, date) VALUES (?,?,?,?,?,?,?,?);",
                    (currentOrderNumber2, self.CartTable.item(rows, 0).text(), int(self.CartTable.item(rows, 3).text()),
                     self.CartTable.item(rows, 2).text(),
                     self.CartTable.item(rows, 5).text(),
                     int(self.CartTable.item(rows, 1).text()), "Pending", date)
                )
                rows += 1

            cursor.execute("SELECT * FROM orders")
            for each in cursor.fetchall():
                print(each)
            conn.commit()
            qm = QMessageBox()
            qm.setText("Order Submitted Successfully!")
            qm.exec()
            self.clearData()
    def addData(self):
        if len(self.BundlesTable.selectionModel().selectedIndexes()) > 0:
            itemName = self.BundlesTable.item(self.BundlesTable.currentRow(), 0).text()
            itemCategory = self.BundlesTable.item(self.BundlesTable.currentRow(), 1).text()
            itemDescription = self.BundlesTable.item(self.BundlesTable.currentRow(), 2).text()
            itemPrice = int(self.BundlesTable.item(self.BundlesTable.currentRow(), 3).text())
            itemTax = self.BundlesTable.item(self.BundlesTable.currentRow(), 4).text()
            itemTaxValue = float(itemTax[0:itemTax.find('%')])
            rowCount = self.CartTable.rowCount()

            repeated = False
            for each in range(rowCount):
                if self.CartTable.item(each, 0).text() == itemName:
                    quantity = int(self.CartTable.item(each, 1).text())
                    quantity += 1
                    self.CartTable.setItem(each, 1, QtWidgets.QTableWidgetItem(str(quantity)))
                    self.CartTable.setItem(each,4, QtWidgets.QTableWidgetItem(str(quantity * (itemPrice+(itemPrice*(itemTaxValue/100))))))
                    repeated = True

            if not repeated:
                newRowCount = rowCount + 1
                self.CartTable.setRowCount(newRowCount)
                self.CartTable.setItem(newRowCount - 1, 0, QtWidgets.QTableWidgetItem(itemName))
                self.CartTable.setItem(newRowCount - 1, 1, QtWidgets.QTableWidgetItem(str(1)))
                self.CartTable.setItem(newRowCount - 1, 2, QtWidgets.QTableWidgetItem(itemTax))
                self.CartTable.setItem(newRowCount - 1, 3, QtWidgets.QTableWidgetItem(str(itemPrice)))
                self.CartTable.setItem(newRowCount - 1, 4, QtWidgets.QTableWidgetItem(str(itemPrice+(itemPrice*(itemTaxValue/100)))))
                self.CartTable.setItem(newRowCount - 1, 5, QtWidgets.QTableWidgetItem(itemCategory))
            self.BundlesTable.selectionModel().clearSelection()
        elif len(self.MainMealTable.selectionModel().selectedIndexes()) > 0:
            itemName = self.MainMealTable.item(self.MainMealTable.currentRow(), 0).text()
            itemCategory = self.MainMealTable.item(self.MainMealTable.currentRow(), 1).text()
            itemDescription = self.MainMealTable.item(self.MainMealTable.currentRow(), 2).text()
            itemPrice = int(self.MainMealTable.item(self.MainMealTable.currentRow(), 3).text())
            itemTax = self.MainMealTable.item(self.MainMealTable.currentRow(), 4).text()
            itemTaxValue = float(itemTax[0:itemTax.find('%')])
            rowCount = self.CartTable.rowCount()

            repeated = False
            for each in range(rowCount):
                if self.CartTable.item(each, 0).text() == itemName:
                    quantity = int(self.CartTable.item(each, 1).text())
                    quantity += 1
                    self.CartTable.setItem(each, 1, QtWidgets.QTableWidgetItem(str(quantity)))
                    self.CartTable.setItem(each, 4, QtWidgets.QTableWidgetItem(
                        str(quantity * (itemPrice + (itemPrice * (itemTaxValue / 100))))))
                    repeated = True

            if not repeated:
                newRowCount = rowCount + 1
                self.CartTable.setRowCount(newRowCount)
                self.CartTable.setItem(newRowCount - 1, 0, QtWidgets.QTableWidgetItem(itemName))
                self.CartTable.setItem(newRowCount - 1, 1, QtWidgets.QTableWidgetItem(str(1)))
                self.CartTable.setItem(newRowCount - 1, 2, QtWidgets.QTableWidgetItem(itemTax))
                self.CartTable.setItem(newRowCount - 1, 3, QtWidgets.QTableWidgetItem(str(itemPrice)))
                self.CartTable.setItem(newRowCount - 1, 4,
                                       QtWidgets.QTableWidgetItem(str(itemPrice + (itemPrice * (itemTaxValue / 100)))))
                self.CartTable.setItem(newRowCount - 1, 5, QtWidgets.QTableWidgetItem(itemCategory))
            self.MainMealTable.selectionModel().clearSelection()
        elif len(self.DesertsTable.selectionModel().selectedIndexes()) > 0:
            itemName = self.DesertsTable.item(self.DesertsTable.currentRow(), 0).text()
            itemCategory = self.DesertsTable.item(self.DesertsTable.currentRow(), 1).text()
            itemDescription = self.DesertsTable.item(self.DesertsTable.currentRow(), 2).text()
            itemPrice = int(self.DesertsTable.item(self.DesertsTable.currentRow(), 3).text())
            itemTax = self.DesertsTable.item(self.DesertsTable.currentRow(), 4).text()
            itemTaxValue = float(itemTax[0:itemTax.find('%')])
            rowCount = self.CartTable.rowCount()

            repeated = False
            for each in range(rowCount):
                if self.CartTable.item(each, 0).text() == itemName:
                    quantity = int(self.CartTable.item(each, 1).text())
                    quantity += 1
                    self.CartTable.setItem(each, 1, QtWidgets.QTableWidgetItem(str(quantity)))
                    self.CartTable.setItem(each, 4, QtWidgets.QTableWidgetItem(
                        str(quantity * (itemPrice + (itemPrice * (itemTaxValue / 100))))))
                    repeated = True

            if not repeated:
                newRowCount = rowCount + 1
                self.CartTable.setRowCount(newRowCount)
                self.CartTable.setItem(newRowCount - 1, 0, QtWidgets.QTableWidgetItem(itemName))
                self.CartTable.setItem(newRowCount - 1, 1, QtWidgets.QTableWidgetItem(str(1)))
                self.CartTable.setItem(newRowCount - 1, 2, QtWidgets.QTableWidgetItem(itemTax))
                self.CartTable.setItem(newRowCount - 1, 3, QtWidgets.QTableWidgetItem(str(itemPrice)))
                self.CartTable.setItem(newRowCount - 1, 4,
                                       QtWidgets.QTableWidgetItem(str(itemPrice + (itemPrice * (itemTaxValue / 100)))))
                self.CartTable.setItem(newRowCount - 1, 5, QtWidgets.QTableWidgetItem(itemCategory))
            self.DesertsTable.selectionModel().clearSelection()
        elif len(self.DrinksTable.selectionModel().selectedIndexes()) > 0:
            itemName = self.DrinksTable.item(self.DrinksTable.currentRow(), 0).text()
            itemCategory = self.DrinksTable.item(self.DrinksTable.currentRow(), 1).text()
            itemDescription = self.DrinksTable.item(self.DrinksTable.currentRow(), 2).text()
            itemPrice = int(self.DrinksTable.item(self.DrinksTable.currentRow(), 3).text())
            itemTax = self.DrinksTable.item(self.DrinksTable.currentRow(), 4).text()
            itemTaxValue = float(itemTax[0:itemTax.find('%')])
            rowCount = self.CartTable.rowCount()

            repeated = False
            for each in range(rowCount):
                if self.CartTable.item(each, 0).text() == itemName:
                    quantity = int(self.CartTable.item(each, 1).text())
                    quantity += 1
                    self.CartTable.setItem(each, 1, QtWidgets.QTableWidgetItem(str(quantity)))
                    self.CartTable.setItem(each, 4, QtWidgets.QTableWidgetItem(
                        str(quantity * (itemPrice + (itemPrice * (itemTaxValue / 100))))))
                    repeated = True

            if not repeated:
                newRowCount = rowCount + 1
                self.CartTable.setRowCount(newRowCount)
                self.CartTable.setItem(newRowCount - 1, 0, QtWidgets.QTableWidgetItem(itemName))
                self.CartTable.setItem(newRowCount - 1, 1, QtWidgets.QTableWidgetItem(str(1)))
                self.CartTable.setItem(newRowCount - 1, 2, QtWidgets.QTableWidgetItem(itemTax))
                self.CartTable.setItem(newRowCount - 1, 3, QtWidgets.QTableWidgetItem(str(itemPrice)))
                self.CartTable.setItem(newRowCount - 1, 4,
                                       QtWidgets.QTableWidgetItem(str(itemPrice + (itemPrice * (itemTaxValue / 100)))))
                self.CartTable.setItem(newRowCount - 1, 5, QtWidgets.QTableWidgetItem(itemCategory))
            self.DrinksTable.selectionModel().clearSelection()
        elif len(self.SnacksTable.selectionModel().selectedIndexes()) > 0:
            itemName = self.SnacksTable.item(self.SnacksTable.currentRow(), 0).text()
            itemCategory = self.SnacksTable.item(self.SnacksTable.currentRow(), 1).text()
            itemDescription = self.SnacksTable.item(self.SnacksTable.currentRow(), 2).text()
            itemPrice = int(self.SnacksTable.item(self.SnacksTable.currentRow(), 3).text())
            itemTax = self.SnacksTable.item(self.SnacksTable.currentRow(), 4).text()
            itemTaxValue = float(itemTax[0:itemTax.find('%')])
            rowCount = self.CartTable.rowCount()

            repeated = False
            for each in range(rowCount):
                if self.CartTable.item(each, 0).text() == itemName:
                    quantity = int(self.CartTable.item(each, 1).text())
                    quantity += 1
                    self.CartTable.setItem(each, 1, QtWidgets.QTableWidgetItem(str(quantity)))
                    self.CartTable.setItem(each, 4, QtWidgets.QTableWidgetItem(
                        str(quantity * (itemPrice + (itemPrice * (itemTaxValue / 100))))))
                    repeated = True

            if not repeated:
                newRowCount = rowCount + 1
                self.CartTable.setRowCount(newRowCount)
                self.CartTable.setItem(newRowCount - 1, 0, QtWidgets.QTableWidgetItem(itemName))
                self.CartTable.setItem(newRowCount - 1, 1, QtWidgets.QTableWidgetItem(str(1)))
                self.CartTable.setItem(newRowCount - 1, 2, QtWidgets.QTableWidgetItem(itemTax))
                self.CartTable.setItem(newRowCount - 1, 3, QtWidgets.QTableWidgetItem(str(itemPrice)))
                self.CartTable.setItem(newRowCount - 1, 4,
                                       QtWidgets.QTableWidgetItem(str(itemPrice + (itemPrice * (itemTaxValue / 100)))))
                self.CartTable.setItem(newRowCount - 1, 5, QtWidgets.QTableWidgetItem(itemCategory))
            self.SnacksTable.selectionModel().clearSelection()
        else:
            qm = QMessageBox()
            qm.setText("No items have been selected!")
            qm.exec()
    def setupUi(self, OrderPage):
        OrderPage.setObjectName("OrderPage")
        OrderPage.resize(1180, 801)
        OrderPage.setStyleSheet("QPushButton {\n"
                                 "background-color: #FF9A00;\n"
                                 "font: 63 12pt \"Segoe UI Semibold\";\n"
                                 "color: rgb(255, 255, 255);\n"
                                 "border-color: rgb(255, 255, 255);\n"
                                 "}")
        self.centralwidget = QtWidgets.QWidget(OrderPage)
        self.centralwidget.setObjectName("centralwidget")
        self.OrderBG = QtWidgets.QLabel(self.centralwidget)
        self.OrderBG.setGeometry(QtCore.QRect(0, 0, 1181, 901))
        self.OrderBG.setStyleSheet("background-image: url(:/OrderBG/img/bg/OrderBG.png)")
        self.OrderBG.setText("")
        self.OrderBG.setObjectName("OrderBG")
        self.OrderTabs = QtWidgets.QTabWidget(self.centralwidget)
        self.OrderTabs.setGeometry(QtCore.QRect(20, 180, 601, 601))
        self.OrderTabs.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.OrderTabs.setStyleSheet("QTabWidget::pane {\n"
                                     "    border: 1px solid black;\n"
                                     "    background: white;\n"
                                     "}\n"
                                     "\n"
                                     "QTabWidget::tab-bar:top {\n"
                                     "    top: 1px;\n"
                                     "}\n"
                                     "\n"
                                     "QTabWidget::tab-bar:bottom {\n"
                                     "    bottom: 1px;\n"
                                     "}\n"
                                     "\n"
                                     "QTabWidget::tab-bar:left {\n"
                                     "    right: 1px;\n"
                                     "}\n"
                                     "\n"
                                     "QTabWidget::tab-bar:right {\n"
                                     "    left: 1px;\n"
                                     "}\n"
                                     "\n"
                                     "QTabBar::tab {\n"
                                     "    border: 1px solid black;\n"
                                     "}\n"
                                     "\n"
                                     "QTabBar::tab:selected {\n"
                                     "    background: #F25234;\n"
                                     "    color: white;\n"
                                     "}\n"
                                     "\n"
                                     "QTabBar::tab:!selected {\n"
                                     "    background: #FF9A00;\n"
                                     "    color: white;\n"
                                     "}\n"
                                     "\n"
                                     "QTabBar::tab:!selected:hover {\n"
                                     "    background: #48C0A8;\n"
                                     "    color: white;\n"
                                     "}\n"
                                     "\n"
                                     "QTabBar::tab:top:!selected {\n"
                                     "    margin-top: 3px;\n"
                                     "}\n"
                                     "\n"
                                     "QTabBar::tab:bottom:!selected {\n"
                                     "    margin-bottom: 3px;\n"
                                     "}\n"
                                     "\n"
                                     "QTabBar::tab:top, QTabBar::tab:bottom {\n"
                                     "    min-width: 8ex;\n"
                                     "    margin-right: -1px;\n"
                                     "    padding: 5px 10px 5px 10px;\n"
                                     "}\n"
                                     "\n"
                                     "QTabBar::tab:top:selected {\n"
                                     "    border-bottom-color: none;\n"
                                     "}\n"
                                     "\n"
                                     "QTabBar::tab:bottom:selected {\n"
                                     "    border-top-color: none;\n"
                                     "}\n"
                                     "\n"
                                     "QTabBar::tab:top:last, QTabBar::tab:bottom:last,\n"
                                     "QTabBar::tab:top:only-one, QTabBar::tab:bottom:only-one {\n"
                                     "    margin-right: 0;\n"
                                     "}\n"
                                     "\n"
                                     "QTabBar::tab:left:!selected {\n"
                                     "    margin-right: 3px;\n"
                                     "}\n"
                                     "\n"
                                     "QTabBar::tab:right:!selected {\n"
                                     "    margin-left: 3px;\n"
                                     "}\n"
                                     "\n"
                                     "QTabBar::tab:left, QTabBar::tab:right {\n"
                                     "    min-height: 8ex;\n"
                                     "    margin-bottom: -1px;\n"
                                     "    padding: 10px 5px 10px 5px;\n"
                                     "}\n"
                                     "\n"
                                     "QTabBar::tab:left:selected {\n"
                                     "    border-left-color: none;\n"
                                     "}\n"
                                     "\n"
                                     "QTabBar::tab:right:selected {\n"
                                     "    border-right-color: none;\n"
                                     "}\n"
                                     "\n"
                                     "QTabBar::tab:left:last, QTabBar::tab:right:last,\n"
                                     "QTabBar::tab:left:only-one, QTabBar::tab:right:only-one {\n"
                                     "    margin-bottom: 0;\n"
                                     "}")
        self.OrderTabs.setTabPosition(QtWidgets.QTabWidget.West)
        self.OrderTabs.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.OrderTabs.setIconSize(QtCore.QSize(45, 50))
        self.OrderTabs.setElideMode(QtCore.Qt.ElideLeft)
        self.OrderTabs.setDocumentMode(False)
        self.OrderTabs.setObjectName("OrderTabs")
        self.MainMeal = QtWidgets.QWidget()
        self.MainMeal.setObjectName("MainMeal")
        self.MainMealTable = QtWidgets.QTableWidget(self.MainMeal)
        self.MainMealTable.setGeometry(QtCore.QRect(0, 0, 541, 601))
        self.MainMealTable.setObjectName("MainMealTable")
        self.MainMealTable.setColumnCount(5)
        self.MainMealTable.setRowCount(10)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setVerticalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setVerticalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setVerticalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setVerticalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setVerticalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setVerticalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setVerticalHeaderItem(8, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setVerticalHeaderItem(9, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(0, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(0, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(0, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(0, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(0, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(1, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(1, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(1, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(1, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(1, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(2, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(2, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(2, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(2, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(2, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(3, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(3, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(3, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(3, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(3, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(4, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(4, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(4, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(4, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(4, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(5, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(5, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(5, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(5, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(5, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(6, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(6, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(6, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(6, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(6, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(7, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(7, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(7, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(7, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(7, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(8, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(8, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(8, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(8, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(8, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(9, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(9, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(9, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(9, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.MainMealTable.setItem(9, 4, item)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/Icons/img/Dinner.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.OrderTabs.addTab(self.MainMeal, icon, "")
        self.Drinks = QtWidgets.QWidget()
        self.Drinks.setObjectName("Drinks")
        self.DrinksTable = QtWidgets.QTableWidget(self.Drinks)
        self.DrinksTable.setGeometry(QtCore.QRect(0, 0, 541, 601))
        self.DrinksTable.setObjectName("DrinksTable")
        self.DrinksTable.setColumnCount(5)
        self.DrinksTable.setRowCount(15)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setVerticalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setVerticalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setVerticalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setVerticalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setVerticalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setVerticalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setVerticalHeaderItem(8, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setVerticalHeaderItem(9, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setVerticalHeaderItem(10, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setVerticalHeaderItem(11, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setVerticalHeaderItem(12, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setVerticalHeaderItem(13, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setVerticalHeaderItem(14, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(0, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(0, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(0, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(0, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(0, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(1, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(1, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(1, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(1, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(1, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(2, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(2, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(2, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(2, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(2, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(3, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(3, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(3, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(3, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(3, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(4, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(4, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(4, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(4, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(4, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(5, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(5, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(5, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(5, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(5, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(6, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(6, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(6, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(6, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(6, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(7, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(7, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(7, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(7, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(7, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(8, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(8, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(8, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(8, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(8, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(9, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(9, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(9, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(9, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(9, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(10, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(10, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(10, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(10, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(10, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(11, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(11, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(11, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(11, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(11, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(12, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(12, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(12, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(12, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(12, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(13, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(13, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(13, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(13, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(13, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(14, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(14, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(14, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(14, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.DrinksTable.setItem(14, 4, item)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/Icons/img/Drinks.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.OrderTabs.addTab(self.Drinks, icon1, "")
        self.Snacks = QtWidgets.QWidget()
        self.Snacks.setObjectName("Snacks")
        self.SnacksTable = QtWidgets.QTableWidget(self.Snacks)
        self.SnacksTable.setGeometry(QtCore.QRect(0, 0, 541, 601))
        self.SnacksTable.setObjectName("SnacksTable")
        self.SnacksTable.setColumnCount(5)
        self.SnacksTable.setRowCount(4)
        item = QtWidgets.QTableWidgetItem()
        self.SnacksTable.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.SnacksTable.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.SnacksTable.setVerticalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.SnacksTable.setVerticalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.SnacksTable.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.SnacksTable.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.SnacksTable.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.SnacksTable.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.SnacksTable.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.SnacksTable.setItem(0, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.SnacksTable.setItem(0, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.SnacksTable.setItem(0, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.SnacksTable.setItem(0, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.SnacksTable.setItem(0, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.SnacksTable.setItem(1, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.SnacksTable.setItem(1, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.SnacksTable.setItem(1, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.SnacksTable.setItem(1, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.SnacksTable.setItem(1, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.SnacksTable.setItem(2, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.SnacksTable.setItem(2, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.SnacksTable.setItem(2, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.SnacksTable.setItem(2, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.SnacksTable.setItem(2, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.SnacksTable.setItem(3, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.SnacksTable.setItem(3, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.SnacksTable.setItem(3, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.SnacksTable.setItem(3, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.SnacksTable.setItem(3, 4, item)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/Icons/img/Snacks.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.OrderTabs.addTab(self.Snacks, icon2, "")
        self.Deserts = QtWidgets.QWidget()
        self.Deserts.setObjectName("Deserts")
        self.DesertsTable = QtWidgets.QTableWidget(self.Deserts)
        self.DesertsTable.setGeometry(QtCore.QRect(0, 0, 541, 601))
        self.DesertsTable.setObjectName("DesertsTable")
        self.DesertsTable.setColumnCount(5)
        self.DesertsTable.setRowCount(4)
        item = QtWidgets.QTableWidgetItem()
        self.DesertsTable.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.DesertsTable.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.DesertsTable.setVerticalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.DesertsTable.setVerticalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.DesertsTable.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.DesertsTable.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.DesertsTable.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.DesertsTable.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.DesertsTable.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.DesertsTable.setItem(0, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.DesertsTable.setItem(0, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.DesertsTable.setItem(0, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.DesertsTable.setItem(0, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.DesertsTable.setItem(0, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.DesertsTable.setItem(1, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.DesertsTable.setItem(1, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.DesertsTable.setItem(1, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.DesertsTable.setItem(1, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.DesertsTable.setItem(1, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.DesertsTable.setItem(2, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.DesertsTable.setItem(2, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.DesertsTable.setItem(2, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.DesertsTable.setItem(2, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.DesertsTable.setItem(2, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.DesertsTable.setItem(3, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.DesertsTable.setItem(3, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.DesertsTable.setItem(3, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.DesertsTable.setItem(3, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.DesertsTable.setItem(3, 4, item)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/Icons/img/Deserts.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.OrderTabs.addTab(self.Deserts, icon3, "")
        self.Bundles = QtWidgets.QWidget()
        self.Bundles.setObjectName("Bundles")
        self.BundlesTable = QtWidgets.QTableWidget(self.Bundles)
        self.BundlesTable.setGeometry(QtCore.QRect(0, 0, 541, 601))
        self.BundlesTable.setObjectName("BundlesTable")
        self.BundlesTable.setColumnCount(5)
        self.BundlesTable.setRowCount(14)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setVerticalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setVerticalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setVerticalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setVerticalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setVerticalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setVerticalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setVerticalHeaderItem(8, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setVerticalHeaderItem(9, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setVerticalHeaderItem(10, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setVerticalHeaderItem(11, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setVerticalHeaderItem(12, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setVerticalHeaderItem(13, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(0, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(0, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(0, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(0, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(0, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(1, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(1, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(1, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(1, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(1, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(2, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(2, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(2, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(2, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(2, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(3, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(3, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(3, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(3, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(3, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(4, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(4, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(4, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(4, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(4, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(5, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(5, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(5, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(5, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(5, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(6, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(6, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(6, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(6, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(6, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(7, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(7, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(7, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(7, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(7, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(8, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(8, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(8, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(8, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(8, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(9, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(9, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(9, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(9, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(9, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(10, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(10, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(10, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(10, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(10, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(11, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(11, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(11, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(11, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(11, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(12, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(12, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(12, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(12, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(12, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(13, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(13, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(13, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(13, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.BundlesTable.setItem(13, 4, item)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/Icons/img/Combo.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.OrderTabs.addTab(self.Bundles, icon4, "")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(640, 180, 501, 601))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.Cart = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.Cart.setContentsMargins(0, 0, 0, 0)
        self.Cart.setObjectName("Cart")
        self.CartTable = QtWidgets.QTableWidget(self.verticalLayoutWidget)
        self.CartTable.setColumnCount(6)
        self.CartTable.setObjectName("CartTable")
        self.CartTable.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.CartTable.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.CartTable.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.CartTable.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.CartTable.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.CartTable.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.CartTable.setHorizontalHeaderItem(5, item)
        self.Cart.addWidget(self.CartTable)
        self.ButtonBox = QtWidgets.QHBoxLayout()
        self.ButtonBox.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.ButtonBox.setObjectName("ButtonBox")
        self.RegisterButton_2 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.RegisterButton_2.setMinimumSize(QtCore.QSize(50, 40))
        self.RegisterButton_2.setObjectName("RegisterButton_2")
        self.ButtonBox.addWidget(self.RegisterButton_2)
        self.LoginButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.LoginButton.setMinimumSize(QtCore.QSize(50, 40))
        font = QtGui.QFont()
        font.setFamily("Segoe UI Semibold")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(7)
        self.LoginButton.setFont(font)
        self.LoginButton.setStyleSheet("")
        self.LoginButton.setFlat(False)
        self.LoginButton.setObjectName("LoginButton")
        self.ButtonBox.addWidget(self.LoginButton)
        self.RegisterButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.RegisterButton.setMinimumSize(QtCore.QSize(50, 40))
        self.RegisterButton.setObjectName("RegisterButton")
        self.ButtonBox.addWidget(self.RegisterButton)
        self.Cart.addLayout(self.ButtonBox)
        self.LoginTitle = QtWidgets.QLabel(self.centralwidget)
        self.LoginTitle.setGeometry(QtCore.QRect(430, 50, 391, 91))
        self.LoginTitle.setStyleSheet("font: 87 26pt \"Segoe UI\";")
        self.LoginTitle.setObjectName("LoginTitle")
        OrderPage.setCentralWidget(self.centralwidget)

        self.retranslateUi(OrderPage)
        self.OrderTabs.setCurrentIndex(3)
        QtCore.QMetaObject.connectSlotsByName(OrderPage)
        self.RegisterButton_2.clicked.connect(self.addData)
        self.RegisterButton.clicked.connect(self.clearData)
        self.LoginButton.clicked.connect(self.submitData)

    def retranslateUi(self, OrderPage):
        _translate = QtCore.QCoreApplication.translate
        OrderPage.setWindowTitle(_translate("OrderPage", "OrderPage"))
        item = self.MainMealTable.horizontalHeaderItem(0)
        item.setText(_translate("OrderPage", "Item Name"))
        item = self.MainMealTable.horizontalHeaderItem(1)
        item.setText(_translate("OrderPage", "Item Category"))
        item = self.MainMealTable.horizontalHeaderItem(2)
        item.setText(_translate("OrderPage", "Item Description"))
        item = self.MainMealTable.horizontalHeaderItem(3)
        item.setText(_translate("OrderPage", "Item Price"))
        item = self.MainMealTable.horizontalHeaderItem(4)
        item.setText(_translate("OrderPage", "Item Tax"))
        __sortingEnabled = self.MainMealTable.isSortingEnabled()
        self.MainMealTable.setSortingEnabled(False)
        item = self.MainMealTable.item(0, 0)
        item.setText(_translate("OrderPage", "Chicken"))
        item = self.MainMealTable.item(0, 1)
        item.setText(_translate("OrderPage", "Main Meal"))
        item = self.MainMealTable.item(0, 2)
        item.setText(_translate("OrderPage", "Main Course"))
        item = self.MainMealTable.item(0, 3)
        item.setText(_translate("OrderPage", "300"))
        item = self.MainMealTable.item(0, 4)
        item.setText(_translate("OrderPage", "3%"))
        item = self.MainMealTable.item(1, 0)
        item.setText(_translate("OrderPage", "Chicken Tikka"))
        item = self.MainMealTable.item(1, 1)
        item.setText(_translate("OrderPage", "Main Meal"))
        item = self.MainMealTable.item(1, 2)
        item.setText(_translate("OrderPage", "Kabab "))
        item = self.MainMealTable.item(1, 3)
        item.setText(_translate("OrderPage", "150"))
        item = self.MainMealTable.item(1, 4)
        item.setText(_translate("OrderPage", "1.5%"))
        item = self.MainMealTable.item(2, 0)
        item.setText(_translate("OrderPage", "Chicken Fajita"))
        item = self.MainMealTable.item(2, 1)
        item.setText(_translate("OrderPage", "Main Meal"))
        item = self.MainMealTable.item(2, 2)
        item.setText(_translate("OrderPage", "Kabab"))
        item = self.MainMealTable.item(2, 3)
        item.setText(_translate("OrderPage", "150"))
        item = self.MainMealTable.item(2, 4)
        item.setText(_translate("OrderPage", "1.5%"))
        item = self.MainMealTable.item(3, 0)
        item.setText(_translate("OrderPage", "Bar B Q Chicken"))
        item = self.MainMealTable.item(3, 1)
        item.setText(_translate("OrderPage", "Main Meal"))
        item = self.MainMealTable.item(3, 2)
        item.setText(_translate("OrderPage", "Main Course"))
        item = self.MainMealTable.item(3, 3)
        item.setText(_translate("OrderPage", "200"))
        item = self.MainMealTable.item(3, 4)
        item.setText(_translate("OrderPage", "2%"))
        item = self.MainMealTable.item(4, 0)
        item.setText(_translate("OrderPage", "Chicken Pineapple"))
        item = self.MainMealTable.item(4, 1)
        item.setText(_translate("OrderPage", "Main Meal"))
        item = self.MainMealTable.item(4, 2)
        item.setText(_translate("OrderPage", "Main Course"))
        item = self.MainMealTable.item(4, 3)
        item.setText(_translate("OrderPage", "250"))
        item = self.MainMealTable.item(4, 4)
        item.setText(_translate("OrderPage", "2%"))
        item = self.MainMealTable.item(5, 0)
        item.setText(_translate("OrderPage", "Vegetable"))
        item = self.MainMealTable.item(5, 1)
        item.setText(_translate("OrderPage", "Main Meal"))
        item = self.MainMealTable.item(5, 2)
        item.setText(_translate("OrderPage", "Main Course"))
        item = self.MainMealTable.item(5, 3)
        item.setText(_translate("OrderPage", "250"))
        item = self.MainMealTable.item(5, 4)
        item.setText(_translate("OrderPage", "2%"))
        item = self.MainMealTable.item(6, 0)
        item.setText(_translate("OrderPage", "Pepperoni"))
        item = self.MainMealTable.item(6, 1)
        item.setText(_translate("OrderPage", "Main Meal"))
        item = self.MainMealTable.item(6, 2)
        item.setText(_translate("OrderPage", "Appetizer"))
        item = self.MainMealTable.item(6, 3)
        item.setText(_translate("OrderPage", "250"))
        item = self.MainMealTable.item(6, 4)
        item.setText(_translate("OrderPage", "2%"))
        item = self.MainMealTable.item(7, 0)
        item.setText(_translate("OrderPage", "Fish"))
        item = self.MainMealTable.item(7, 1)
        item.setText(_translate("OrderPage", "Main Meal"))
        item = self.MainMealTable.item(7, 2)
        item.setText(_translate("OrderPage", "Main Course"))
        item = self.MainMealTable.item(7, 3)
        item.setText(_translate("OrderPage", "300"))
        item = self.MainMealTable.item(7, 4)
        item.setText(_translate("OrderPage", "3%"))
        item = self.MainMealTable.item(8, 0)
        item.setText(_translate("OrderPage", "Pineapple"))
        item = self.MainMealTable.item(8, 1)
        item.setText(_translate("OrderPage", "Main Meal"))
        item = self.MainMealTable.item(8, 2)
        item.setText(_translate("OrderPage", "Main Course"))
        item = self.MainMealTable.item(8, 3)
        item.setText(_translate("OrderPage", "350"))
        item = self.MainMealTable.item(8, 4)
        item.setText(_translate("OrderPage", "5%"))
        item = self.MainMealTable.item(9, 0)
        item.setText(_translate("OrderPage", "Beef"))
        item = self.MainMealTable.item(9, 1)
        item.setText(_translate("OrderPage", "Main Meal"))
        item = self.MainMealTable.item(9, 2)
        item.setText(_translate("OrderPage", "Main Course"))
        item = self.MainMealTable.item(9, 3)
        item.setText(_translate("OrderPage", "350"))
        item = self.MainMealTable.item(9, 4)
        item.setText(_translate("OrderPage", "4%"))
        self.MainMealTable.setSortingEnabled(__sortingEnabled)
        self.OrderTabs.setTabText(self.OrderTabs.indexOf(self.MainMeal), _translate("OrderPage", "Main Meal"))
        item = self.DrinksTable.horizontalHeaderItem(0)
        item.setText(_translate("OrderPage", "Item Name"))
        item = self.DrinksTable.horizontalHeaderItem(1)
        item.setText(_translate("OrderPage", "Item Category"))
        item = self.DrinksTable.horizontalHeaderItem(2)
        item.setText(_translate("OrderPage", "Item Description"))
        item = self.DrinksTable.horizontalHeaderItem(3)
        item.setText(_translate("OrderPage", "Item Price"))
        item = self.DrinksTable.horizontalHeaderItem(4)
        item.setText(_translate("OrderPage", "Item Tax"))
        __sortingEnabled = self.DrinksTable.isSortingEnabled()
        self.DrinksTable.setSortingEnabled(False)
        item = self.DrinksTable.item(0, 0)
        item.setText(_translate("OrderPage", "Banana Juice"))
        item = self.DrinksTable.item(0, 1)
        item.setText(_translate("OrderPage", "Drinks"))
        item = self.DrinksTable.item(0, 2)
        item.setText(_translate("OrderPage", "Beverage"))
        item = self.DrinksTable.item(0, 3)
        item.setText(_translate("OrderPage", "120"))
        item = self.DrinksTable.item(0, 4)
        item.setText(_translate("OrderPage", "3%"))
        item = self.DrinksTable.item(1, 0)
        item.setText(_translate("OrderPage", "Capuccino Coffee"))
        item = self.DrinksTable.item(1, 1)
        item.setText(_translate("OrderPage", "Drinks"))
        item = self.DrinksTable.item(1, 2)
        item.setText(_translate("OrderPage", "Hot Drink"))
        item = self.DrinksTable.item(1, 3)
        item.setText(_translate("OrderPage", "100"))
        item = self.DrinksTable.item(1, 4)
        item.setText(_translate("OrderPage", "2%"))
        item = self.DrinksTable.item(2, 0)
        item.setText(_translate("OrderPage", "Latte Coffee"))
        item = self.DrinksTable.item(2, 1)
        item.setText(_translate("OrderPage", "Drinks"))
        item = self.DrinksTable.item(2, 2)
        item.setText(_translate("OrderPage", "Hot Drink"))
        item = self.DrinksTable.item(2, 3)
        item.setText(_translate("OrderPage", "100"))
        item = self.DrinksTable.item(2, 4)
        item.setText(_translate("OrderPage", "2%"))
        item = self.DrinksTable.item(3, 0)
        item.setText(_translate("OrderPage", "Mocha Coffee"))
        item = self.DrinksTable.item(3, 1)
        item.setText(_translate("OrderPage", "Drinks"))
        item = self.DrinksTable.item(3, 2)
        item.setText(_translate("OrderPage", "Hot Drink"))
        item = self.DrinksTable.item(3, 3)
        item.setText(_translate("OrderPage", "100 "))
        item = self.DrinksTable.item(3, 4)
        item.setText(_translate("OrderPage", "1%"))
        item = self.DrinksTable.item(4, 0)
        item.setText(_translate("OrderPage", "Espresso Coffee"))
        item = self.DrinksTable.item(4, 1)
        item.setText(_translate("OrderPage", "Drinks"))
        item = self.DrinksTable.item(4, 2)
        item.setText(_translate("OrderPage", "Hot Drink"))
        item = self.DrinksTable.item(4, 3)
        item.setText(_translate("OrderPage", "100"))
        item = self.DrinksTable.item(4, 4)
        item.setText(_translate("OrderPage", "2%"))
        item = self.DrinksTable.item(5, 0)
        item.setText(_translate("OrderPage", "Ice Coffee"))
        item = self.DrinksTable.item(5, 1)
        item.setText(_translate("OrderPage", "Drinks"))
        item = self.DrinksTable.item(5, 2)
        item.setText(_translate("OrderPage", "Hot Drink"))
        item = self.DrinksTable.item(5, 3)
        item.setText(_translate("OrderPage", "100"))
        item = self.DrinksTable.item(5, 4)
        item.setText(_translate("OrderPage", "1.5%"))
        item = self.DrinksTable.item(6, 0)
        item.setText(_translate("OrderPage", "Apple Juice"))
        item = self.DrinksTable.item(6, 1)
        item.setText(_translate("OrderPage", "Drinks"))
        item = self.DrinksTable.item(6, 2)
        item.setText(_translate("OrderPage", "Beverage"))
        item = self.DrinksTable.item(6, 3)
        item.setText(_translate("OrderPage", "140"))
        item = self.DrinksTable.item(6, 4)
        item.setText(_translate("OrderPage", "2%"))
        item = self.DrinksTable.item(7, 0)
        item.setText(_translate("OrderPage", "Strawberry Juice"))
        item = self.DrinksTable.item(7, 1)
        item.setText(_translate("OrderPage", "Drinks"))
        item = self.DrinksTable.item(7, 2)
        item.setText(_translate("OrderPage", "Beverage"))
        item = self.DrinksTable.item(7, 3)
        item.setText(_translate("OrderPage", "140"))
        item = self.DrinksTable.item(7, 4)
        item.setText(_translate("OrderPage", "4%"))
        item = self.DrinksTable.item(8, 0)
        item.setText(_translate("OrderPage", "Mango Juice"))
        item = self.DrinksTable.item(8, 1)
        item.setText(_translate("OrderPage", "Drinks"))
        item = self.DrinksTable.item(8, 2)
        item.setText(_translate("OrderPage", "Beverage"))
        item = self.DrinksTable.item(8, 3)
        item.setText(_translate("OrderPage", "140"))
        item = self.DrinksTable.item(8, 4)
        item.setText(_translate("OrderPage", "2.5%"))
        item = self.DrinksTable.item(9, 0)
        item.setText(_translate("OrderPage", "Pineapple Juice"))
        item = self.DrinksTable.item(9, 1)
        item.setText(_translate("OrderPage", "Drinks"))
        item = self.DrinksTable.item(9, 2)
        item.setText(_translate("OrderPage", "Beverage"))
        item = self.DrinksTable.item(9, 3)
        item.setText(_translate("OrderPage", "120"))
        item = self.DrinksTable.item(9, 4)
        item.setText(_translate("OrderPage", "3%"))
        item = self.DrinksTable.item(10, 0)
        item.setText(_translate("OrderPage", "Pomegranate Juice"))
        item = self.DrinksTable.item(10, 1)
        item.setText(_translate("OrderPage", "Drinks"))
        item = self.DrinksTable.item(10, 2)
        item.setText(_translate("OrderPage", "Beverage"))
        item = self.DrinksTable.item(10, 3)
        item.setText(_translate("OrderPage", "140"))
        item = self.DrinksTable.item(10, 4)
        item.setText(_translate("OrderPage", "1.5%"))
        item = self.DrinksTable.item(11, 0)
        item.setText(_translate("OrderPage", "Orange Juice"))
        item = self.DrinksTable.item(11, 1)
        item.setText(_translate("OrderPage", "Drinks"))
        item = self.DrinksTable.item(11, 2)
        item.setText(_translate("OrderPage", "Beverage"))
        item = self.DrinksTable.item(11, 3)
        item.setText(_translate("OrderPage", "140"))
        item = self.DrinksTable.item(11, 4)
        item.setText(_translate("OrderPage", "1.5%"))
        item = self.DrinksTable.item(12, 0)
        item.setText(_translate("OrderPage", "Chocolate Milkshake"))
        item = self.DrinksTable.item(12, 1)
        item.setText(_translate("OrderPage", "Drinks"))
        item = self.DrinksTable.item(12, 2)
        item.setText(_translate("OrderPage", "Beverage"))
        item = self.DrinksTable.item(12, 3)
        item.setText(_translate("OrderPage", "130"))
        item = self.DrinksTable.item(12, 4)
        item.setText(_translate("OrderPage", "2%"))
        item = self.DrinksTable.item(13, 0)
        item.setText(_translate("OrderPage", "Kiwi Juice"))
        item = self.DrinksTable.item(13, 1)
        item.setText(_translate("OrderPage", "Drinks"))
        item = self.DrinksTable.item(13, 2)
        item.setText(_translate("OrderPage", "Beverage"))
        item = self.DrinksTable.item(13, 3)
        item.setText(_translate("OrderPage", "120"))
        item = self.DrinksTable.item(13, 4)
        item.setText(_translate("OrderPage", "4%"))
        item = self.DrinksTable.item(14, 0)
        item.setText(_translate("OrderPage", "Coffee"))
        item = self.DrinksTable.item(14, 1)
        item.setText(_translate("OrderPage", "Drinks"))
        item = self.DrinksTable.item(14, 2)
        item.setText(_translate("OrderPage", "Hot Drink"))
        item = self.DrinksTable.item(14, 3)
        item.setText(_translate("OrderPage", "100"))
        item = self.DrinksTable.item(14, 4)
        item.setText(_translate("OrderPage", "3%"))
        self.DrinksTable.setSortingEnabled(__sortingEnabled)
        self.OrderTabs.setTabText(self.OrderTabs.indexOf(self.Drinks), _translate("OrderPage", "Drinks"))
        item = self.SnacksTable.horizontalHeaderItem(0)
        item.setText(_translate("OrderPage", "Item Name"))
        item = self.SnacksTable.horizontalHeaderItem(1)
        item.setText(_translate("OrderPage", "Item Category"))
        item = self.SnacksTable.horizontalHeaderItem(2)
        item.setText(_translate("OrderPage", "Item Description"))
        item = self.SnacksTable.horizontalHeaderItem(3)
        item.setText(_translate("OrderPage", "Item Price"))
        item = self.SnacksTable.horizontalHeaderItem(4)
        item.setText(_translate("OrderPage", "Item Tax"))
        __sortingEnabled = self.SnacksTable.isSortingEnabled()
        self.SnacksTable.setSortingEnabled(False)
        item = self.SnacksTable.item(0, 0)
        item.setText(_translate("OrderPage", "Chicken Soup"))
        item = self.SnacksTable.item(0, 1)
        item.setText(_translate("OrderPage", "Snack"))
        item = self.SnacksTable.item(0, 2)
        item.setText(_translate("OrderPage", "Light Food"))
        item = self.SnacksTable.item(0, 3)
        item.setText(_translate("OrderPage", "200"))
        item = self.SnacksTable.item(0, 4)
        item.setText(_translate("OrderPage", "2%"))
        item = self.SnacksTable.item(1, 0)
        item.setText(_translate("OrderPage", "Vegetable Soup"))
        item = self.SnacksTable.item(1, 1)
        item.setText(_translate("OrderPage", "Snack"))
        item = self.SnacksTable.item(1, 2)
        item.setText(_translate("OrderPage", "Light Food"))
        item = self.SnacksTable.item(1, 3)
        item.setText(_translate("OrderPage", "250"))
        item = self.SnacksTable.item(1, 4)
        item.setText(_translate("OrderPage", "3%"))
        item = self.SnacksTable.item(2, 0)
        item.setText(_translate("OrderPage", "Tomato Soup"))
        item = self.SnacksTable.item(2, 1)
        item.setText(_translate("OrderPage", "Snack"))
        item = self.SnacksTable.item(2, 2)
        item.setText(_translate("OrderPage", "Light Food"))
        item = self.SnacksTable.item(2, 3)
        item.setText(_translate("OrderPage", "200"))
        item = self.SnacksTable.item(2, 4)
        item.setText(_translate("OrderPage", "2%"))
        item = self.SnacksTable.item(3, 0)
        item.setText(_translate("OrderPage", "Peas Soup"))
        item = self.SnacksTable.item(3, 1)
        item.setText(_translate("OrderPage", "Snack"))
        item = self.SnacksTable.item(3, 2)
        item.setText(_translate("OrderPage", "Light Food"))
        item = self.SnacksTable.item(3, 3)
        item.setText(_translate("OrderPage", "150"))
        item = self.SnacksTable.item(3, 4)
        item.setText(_translate("OrderPage", "1.5%"))
        self.SnacksTable.setSortingEnabled(__sortingEnabled)
        self.OrderTabs.setTabText(self.OrderTabs.indexOf(self.Snacks), _translate("OrderPage", "Snacks"))
        item = self.DesertsTable.horizontalHeaderItem(0)
        item.setText(_translate("OrderPage", "Item Name"))
        item = self.DesertsTable.horizontalHeaderItem(1)
        item.setText(_translate("OrderPage", "Item Description"))
        item = self.DesertsTable.horizontalHeaderItem(2)
        item.setText(_translate("OrderPage", "New Column"))
        item = self.DesertsTable.horizontalHeaderItem(3)
        item.setText(_translate("OrderPage", "Item Price"))
        item = self.DesertsTable.horizontalHeaderItem(4)
        item.setText(_translate("OrderPage", "Item Tax"))
        __sortingEnabled = self.DesertsTable.isSortingEnabled()
        self.DesertsTable.setSortingEnabled(False)
        item = self.DesertsTable.item(0, 0)
        item.setText(_translate("OrderPage", "Ice Cream"))
        item = self.DesertsTable.item(0, 1)
        item.setText(_translate("OrderPage", "Dessert"))
        item = self.DesertsTable.item(0, 2)
        item.setText(_translate("OrderPage", "Delicacy"))
        item = self.DesertsTable.item(0, 3)
        item.setText(_translate("OrderPage", "100"))
        item = self.DesertsTable.item(0, 4)
        item.setText(_translate("OrderPage", "3%"))
        item = self.DesertsTable.item(1, 0)
        item.setText(_translate("OrderPage", "Shir Yakh"))
        item = self.DesertsTable.item(1, 1)
        item.setText(_translate("OrderPage", "Dessert"))
        item = self.DesertsTable.item(1, 2)
        item.setText(_translate("OrderPage", "Delicacy"))
        item = self.DesertsTable.item(1, 3)
        item.setText(_translate("OrderPage", "100"))
        item = self.DesertsTable.item(1, 4)
        item.setText(_translate("OrderPage", "3%"))
        item = self.DesertsTable.item(2, 0)
        item.setText(_translate("OrderPage", "Baghlawa"))
        item = self.DesertsTable.item(2, 1)
        item.setText(_translate("OrderPage", "Dessert"))
        item = self.DesertsTable.item(2, 2)
        item.setText(_translate("OrderPage", "Delicacy"))
        item = self.DesertsTable.item(2, 3)
        item.setText(_translate("OrderPage", "100"))
        item = self.DesertsTable.item(2, 4)
        item.setText(_translate("OrderPage", "4%"))
        item = self.DesertsTable.item(3, 0)
        item.setText(_translate("OrderPage", "Halwa"))
        item = self.DesertsTable.item(3, 1)
        item.setText(_translate("OrderPage", "Dessert"))
        item = self.DesertsTable.item(3, 2)
        item.setText(_translate("OrderPage", "Traditional Delicacy"))
        item = self.DesertsTable.item(3, 3)
        item.setText(_translate("OrderPage", "150"))
        item = self.DesertsTable.item(3, 4)
        item.setText(_translate("OrderPage", "3%"))
        self.DesertsTable.setSortingEnabled(__sortingEnabled)
        self.OrderTabs.setTabText(self.OrderTabs.indexOf(self.Deserts), _translate("OrderPage", "Desserts"))
        item = self.BundlesTable.horizontalHeaderItem(0)
        item.setText(_translate("OrderPage", "Item Name"))
        item = self.BundlesTable.horizontalHeaderItem(1)
        item.setText(_translate("OrderPage", "Item Category"))
        item = self.BundlesTable.horizontalHeaderItem(2)
        item.setText(_translate("OrderPage", "Item Description"))
        item = self.BundlesTable.horizontalHeaderItem(3)
        item.setText(_translate("OrderPage", "Item Price"))
        item = self.BundlesTable.horizontalHeaderItem(4)
        item.setText(_translate("OrderPage", "Item Tax"))
        __sortingEnabled = self.BundlesTable.isSortingEnabled()
        self.BundlesTable.setSortingEnabled(False)
        item = self.BundlesTable.item(0, 0)
        item.setText(_translate("OrderPage", "Zinger Burger"))
        item = self.BundlesTable.item(0, 1)
        item.setText(_translate("OrderPage", "Bundles"))
        item = self.BundlesTable.item(0, 2)
        item.setText(_translate("OrderPage", "Fast Food"))
        item = self.BundlesTable.item(0, 3)
        item.setText(_translate("OrderPage", "180"))
        item = self.BundlesTable.item(0, 4)
        item.setText(_translate("OrderPage", "2%"))
        item = self.BundlesTable.item(1, 0)
        item.setText(_translate("OrderPage", "Beef Burger"))
        item = self.BundlesTable.item(1, 1)
        item.setText(_translate("OrderPage", "Bundles"))
        item = self.BundlesTable.item(1, 2)
        item.setText(_translate("OrderPage", "Fast Food"))
        item = self.BundlesTable.item(1, 3)
        item.setText(_translate("OrderPage", "200"))
        item = self.BundlesTable.item(1, 4)
        item.setText(_translate("OrderPage", "4%"))
        item = self.BundlesTable.item(2, 0)
        item.setText(_translate("OrderPage", "Chicken Burger"))
        item = self.BundlesTable.item(2, 1)
        item.setText(_translate("OrderPage", "Bundles"))
        item = self.BundlesTable.item(2, 2)
        item.setText(_translate("OrderPage", "Fast Food"))
        item = self.BundlesTable.item(2, 3)
        item.setText(_translate("OrderPage", "200"))
        item = self.BundlesTable.item(2, 4)
        item.setText(_translate("OrderPage", "1.3%"))
        item = self.BundlesTable.item(3, 0)
        item.setText(_translate("OrderPage", "Fish Burger"))
        item = self.BundlesTable.item(3, 1)
        item.setText(_translate("OrderPage", "Bundles"))
        item = self.BundlesTable.item(3, 2)
        item.setText(_translate("OrderPage", "Fast Food"))
        item = self.BundlesTable.item(3, 3)
        item.setText(_translate("OrderPage", "220"))
        item = self.BundlesTable.item(3, 4)
        item.setText(_translate("OrderPage", "2%"))
        item = self.BundlesTable.item(4, 0)
        item.setText(_translate("OrderPage", "King Size"))
        item = self.BundlesTable.item(4, 1)
        item.setText(_translate("OrderPage", "Bundles"))
        item = self.BundlesTable.item(4, 2)
        item.setText(_translate("OrderPage", "Fast Food"))
        item = self.BundlesTable.item(4, 3)
        item.setText(_translate("OrderPage", "290"))
        item = self.BundlesTable.item(4, 4)
        item.setText(_translate("OrderPage", "1.5%"))
        item = self.BundlesTable.item(5, 0)
        item.setText(_translate("OrderPage", "Fried Chicken"))
        item = self.BundlesTable.item(5, 1)
        item.setText(_translate("OrderPage", "Bundles"))
        item = self.BundlesTable.item(5, 2)
        item.setText(_translate("OrderPage", "Two Pieces"))
        item = self.BundlesTable.item(5, 3)
        item.setText(_translate("OrderPage", "200"))
        item = self.BundlesTable.item(5, 4)
        item.setText(_translate("OrderPage", "1.5%"))
        item = self.BundlesTable.item(6, 0)
        item.setText(_translate("OrderPage", "Chicken Wings"))
        item = self.BundlesTable.item(6, 1)
        item.setText(_translate("OrderPage", "Bundles"))
        item = self.BundlesTable.item(6, 2)
        item.setText(_translate("OrderPage", "12 Pieces"))
        item = self.BundlesTable.item(6, 3)
        item.setText(_translate("OrderPage", "190"))
        item = self.BundlesTable.item(6, 4)
        item.setText(_translate("OrderPage", "2%"))
        item = self.BundlesTable.item(7, 0)
        item.setText(_translate("OrderPage", "Fish Fry"))
        item = self.BundlesTable.item(7, 1)
        item.setText(_translate("OrderPage", "Bundles"))
        item = self.BundlesTable.item(7, 2)
        item.setText(_translate("OrderPage", "Fried"))
        item = self.BundlesTable.item(7, 3)
        item.setText(_translate("OrderPage", "230"))
        item = self.BundlesTable.item(7, 4)
        item.setText(_translate("OrderPage", "3%"))
        item = self.BundlesTable.item(8, 0)
        item.setText(_translate("OrderPage", "Nuggets"))
        item = self.BundlesTable.item(8, 1)
        item.setText(_translate("OrderPage", "Bundles"))
        item = self.BundlesTable.item(8, 2)
        item.setText(_translate("OrderPage", "6 pieces"))
        item = self.BundlesTable.item(8, 3)
        item.setText(_translate("OrderPage", "160"))
        item = self.BundlesTable.item(8, 4)
        item.setText(_translate("OrderPage", "2%"))
        item = self.BundlesTable.item(9, 0)
        item.setText(_translate("OrderPage", "Chicken Tenders"))
        item = self.BundlesTable.item(9, 1)
        item.setText(_translate("OrderPage", "Bundles"))
        item = self.BundlesTable.item(9, 2)
        item.setText(_translate("OrderPage", "Fried"))
        item = self.BundlesTable.item(9, 3)
        item.setText(_translate("OrderPage", "200"))
        item = self.BundlesTable.item(9, 4)
        item.setText(_translate("OrderPage", "2%"))
        item = self.BundlesTable.item(10, 0)
        item.setText(_translate("OrderPage", "Fish Tenders"))
        item = self.BundlesTable.item(10, 1)
        item.setText(_translate("OrderPage", "Bundles"))
        item = self.BundlesTable.item(10, 2)
        item.setText(_translate("OrderPage", "Fried"))
        item = self.BundlesTable.item(10, 3)
        item.setText(_translate("OrderPage", "230"))
        item = self.BundlesTable.item(10, 4)
        item.setText(_translate("OrderPage", "2%"))
        item = self.BundlesTable.item(11, 0)
        item.setText(_translate("OrderPage", "Chicken Popcorn"))
        item = self.BundlesTable.item(11, 1)
        item.setText(_translate("OrderPage", "Bundles"))
        item = self.BundlesTable.item(11, 2)
        item.setText(_translate("OrderPage", "Fried "))
        item = self.BundlesTable.item(11, 3)
        item.setText(_translate("OrderPage", "160"))
        item = self.BundlesTable.item(11, 4)
        item.setText(_translate("OrderPage", "1.5%"))
        item = self.BundlesTable.item(12, 0)
        item.setText(_translate("OrderPage", "Fish Popcorn"))
        item = self.BundlesTable.item(12, 1)
        item.setText(_translate("OrderPage", "Bundles"))
        item = self.BundlesTable.item(12, 2)
        item.setText(_translate("OrderPage", "Fried"))
        item = self.BundlesTable.item(12, 3)
        item.setText(_translate("OrderPage", "160"))
        item = self.BundlesTable.item(12, 4)
        item.setText(_translate("OrderPage", "2%"))
        item = self.BundlesTable.item(13, 0)
        item.setText(_translate("OrderPage", "French Fries"))
        item = self.BundlesTable.item(13, 1)
        item.setText(_translate("OrderPage", "Bundles"))
        item = self.BundlesTable.item(13, 2)
        item.setText(_translate("OrderPage", "Fried"))
        item = self.BundlesTable.item(13, 3)
        item.setText(_translate("OrderPage", "80"))
        item = self.BundlesTable.item(13, 4)
        item.setText(_translate("OrderPage", "1.5%"))
        self.BundlesTable.setSortingEnabled(__sortingEnabled)
        self.OrderTabs.setTabText(self.OrderTabs.indexOf(self.Bundles), _translate("OrderPage", "Bundles"))
        item = self.CartTable.horizontalHeaderItem(0)
        item.setText(_translate("OrderPage", "Item Name"))
        item = self.CartTable.horizontalHeaderItem(1)
        item.setText(_translate("OrderPage", "Item Quantity"))
        item = self.CartTable.horizontalHeaderItem(2)
        item.setText(_translate("OrderPage", "Item Tax"))

        item = self.CartTable.horizontalHeaderItem(3)
        item.setText(_translate("OrderPage", "Item Price"))
        item = self.CartTable.horizontalHeaderItem(4)
        item.setText(_translate("OrderPage", "Total Price"))
        item = self.CartTable.horizontalHeaderItem(5)
        item.setText(_translate("OrderPage", "Category"))
        self.RegisterButton_2.setText(_translate("OrderPage", "Add Order"))
        self.LoginButton.setText(_translate("OrderPage", "Submit Order"))
        self.RegisterButton.setText(_translate("OrderPage", "Clear"))
        self.LoginTitle.setText(_translate("OrderPage",
                                           "<html><head/><body><p><span style=\" font-size:48pt; font-weight:600; color:#f25234;\">Order Page</span></p></body></html>"))


import background_rc





class Canvas(FigureCanvas):
    def __init__(self, parent = None, width = 3, height = 3, dpi = 100, totalBundles = 0, totalSnacks = 0, totalDrinks = 0, totalMainMeals = 0, totalDeserts = 0):
        fig = Figure(figsize = (width, height), dpi = dpi)
        FigureCanvas.__init__(self,fig)
        self.setParent(parent)
        self.plot(totalBundles, totalSnacks, totalDrinks, totalMainMeals, totalDeserts)

    def plot(self, totalBundles, totalSnacks, totalDrinks, totalMainMeals, totalDeserts):
        if totalBundles == 0 and totalSnacks == 0 and totalDrinks == 0 and totalMainMeals == 0 and totalDeserts == 0:
            x = np.array([1, 1])
            ax = self.figure.add_subplot(111)
            ax.pie(x)
            ax.set_title('Insufficient Data')
        else:
            x = np.array([totalBundles, totalSnacks, totalDrinks, totalMainMeals, totalDeserts])
            labels = ['BNDL: \n' + str(totalBundles),'SNCK: ' + str(totalSnacks), 'DRNK: ' + str(totalDrinks),"MM: " + str(totalMainMeals),'DSRTS: \n' + str(totalDeserts)]
            ax = self.figure.add_subplot(111)
            ax.set_title("Total Item Sales for Each Category")
            ax.pie(x, labels = labels,autopct='%1.1f%%', textprops={'fontsize': 8})




















#this one should be replaced
class Ui_AdminDashboard(object):
    def logistics(self):
        self.Database()
        file = FPDF('P', 'mm')

        file.add_page()
        file.set_font('helvetica', "", 12)
        file.cell(40, 10, 'Annual Report', 0, 1)
        file.cell(40, 10, '', 0, 1)
        file.cell(40, 10, 'Items sold for each category', 0, 1)
        file.cell(40, 10, '__________________________________________________________________________', 0, 1)

        cursor.execute(
            "SELECT * FROM orders WHERE item_category = 'Bundles' And status = 'Confirmed'"
        )
        totalBundles = 0
        for each in cursor.fetchall():
            totalBundles += each[6]

        file.cell(40, 10, "items sold for category: " + "Bundles" + " -- " + str(totalBundles), 0, 1)

        cursor.execute(
            "SELECT * FROM orders WHERE item_category = 'Deserts' And status = 'Confirmed'"
        )
        totalDeserts = 0
        for each in cursor.fetchall():
            totalDeserts += each[6]

        file.cell(40, 10, "items sold for category: " + "Desserts" + " -- " + str(totalDeserts), 0, 1)

        cursor.execute(
            "SELECT * FROM orders WHERE item_category = 'Drinks' And status = 'Confirmed'"
        )
        totalDrinks = 0
        for each in cursor.fetchall():
            totalDrinks += each[6]

        file.cell(40, 10, "items sold for category: " + "Drinks" + " -- " + str(totalDrinks), 0, 1)

        cursor.execute(
            "SELECT * FROM orders WHERE item_category = 'Snacks' And status = 'Confirmed'"
        )
        totalSnacks = 0

        for each in cursor.fetchall():
            totalSnacks += each[6]

        file.cell(40, 10, "items sold for category: " + "Snacks" + " -- " + str(totalSnacks), 0, 1)

        cursor.execute(
            "SELECT * FROM orders WHERE item_category = 'Main Meal' And status = 'Confirmed'"
        )
        totalMainMeal = 0
        for each in cursor.fetchall():
            totalMainMeal += each[6]

        file.cell(40, 10, "items sold for category: " + "Main Meal" + " -- " + str(totalMainMeal), 0, 1)

        cursor.execute(
            "SELECT item_price, item_quantity, item_tax FROM orders where status = 'Confirmed'"
        )
        result = cursor.fetchall()
        totalPriceWithTax = 0
        totalItems = 0
        for each in result:
            tax = float(each[2][0:each[2].find('%')]) / 100
            totalItems += each[1]
            totalPrice = each[1] * (each[0] + (each[0] * tax))
            totalPriceWithTax += totalPrice

        file.cell(40, 10, "Total revenue generated (with taxes) " + " -- " + str(totalPriceWithTax), 0, 1)

        filename = 'Report.pdf'

        file.output(filename)

        os.system("open " + os.getcwd() + "/" + filename + " -a 'Google Chrome'")


    def loadData(self):
        self.Database()
        cursor.execute(
            "SELECT DISTINCT(order_number) FROM orders where status = 'Confirmed'"
        )
        orders = []

        for each in cursor.fetchall():
            orders.append(each[0])
        self.OrderTable.setRowCount(len(orders))

        row = 0
        for each in orders:
            cursor.execute(
                "SELECT date FROM orders WHERE order_number = :order_number", {'order_number':each}
            )
            result = cursor.fetchone()
            self.OrderTable.setItem(row, 1, QtWidgets.QTableWidgetItem(result[0]))
            self.OrderTable.setItem(row, 0, QtWidgets.QTableWidgetItem(str(each)))
            cursor.execute(
                "SELECT * FROM orders WHERE order_number = :order_number", {'order_number': each}
            )
            result = cursor.fetchall()
            totalPriceWithTax = 0
            totalItems = 0
            for each in result:
                tax = float(each[4][0:each[4].find('%')]) / 100
                totalItems += each[6]
                totalPrice = each[6] * (each[3] + (each[3]*tax))
                totalPriceWithTax += totalPrice
            self.OrderTable.setItem(row, 2, QtWidgets.QTableWidgetItem(str(totalItems)))
            self.OrderTable.setItem(row, 3, QtWidgets.QTableWidgetItem(str(totalPriceWithTax)))
            row += 1

    def Database(self):
        global conn, cursor
        conn = sqlite3.connect("projectdb.db")
        cursor = conn.cursor()
        cursor.execute(
            "CREATE TABLE IF NOT EXISTS `staff` (staff_id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, staff_username TEXT, staff_password TEXT, firstName TEXT, lastName TEXT, email TEXT)")
        cursor.execute(
            "CREATE TABLE IF NOT EXISTS 'orders' (order_number INTEGER, staff_id INTEGER, item_name TEXT, item_price INTEGER, item_tax float(4,2), item_category TEXT, item_quantity INTEGER, status TEXT, date DATE, PRIMARY KEY(order_number, item_name))"
        )
        cursor.execute(
            "CREATE TABLE IF NOT EXISTS `admin` (admin_id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, admin_username TEXT, admin_password TEXT)")

        cursor.execute("SELECT * FROM `admin` WHERE `admin_username` = 'admin' AND `admin_password` = 'admin'")
        if cursor.fetchone() is None:
            cursor.execute("INSERT INTO `admin` (admin_username, admin_password) VALUES('admin', 'admin')")
            conn.commit()
        cursor.execute("SELECT * FROM `staff`")
        if cursor.fetchone() is None:
            cursor.execute(
                "INSERT INTO `staff` (staff_username, staff_password, firstName, lastName, email) VALUES('FS', 'FS', 'FS', 'FS', 'FS')")
            conn.commit()
    def dataVisualization(self):
        #Daily
        self.Database()
        cursor.execute(
            "SELECT date('now')"
        )
        currentDate = cursor.fetchall()[0][0]
        cursor.execute("SELECT * FROM orders WHERE status = 'Confirmed'")
        # for x in cursor.fetchall():
            # print("data fo each",x)
        cursor.execute(
            "SELECT * FROM orders WHERE date = :date AND item_category = 'Bundles' And status = 'Confirmed'", {'date':currentDate}
        )

        totalBundles = 0
        for each in cursor.fetchall():
            print(each)
            totalBundles += each[6]
        cursor.execute(
            "SELECT * FROM orders WHERE date = :date AND item_category = 'Dessert' And status = 'Confirmed'", {'date': currentDate}
        )
        totalDeserts = 0
        for each in cursor.fetchall():
            totalDeserts += each[6]

        cursor.execute(
            "SELECT * FROM orders WHERE date = :date AND item_category = 'Drinks' And status = 'Confirmed'", {'date': currentDate}
        )
        totalDrinks = 0
        for each in cursor.fetchall():
            totalDrinks += each[6]

        cursor.execute(
            "SELECT * FROM orders WHERE date = :date AND item_category = 'Snack' And status = 'Confirmed'", {'date': currentDate}
        )
        totalSnacks = 0
        for each in cursor.fetchall():
            totalSnacks += each[6]

        cursor.execute(
            "SELECT * FROM orders WHERE date = :date AND item_category = 'Main Meal' And status = 'Confirmed'", {'date': currentDate}
        )
        totalMainMeal = 0
        for each in cursor.fetchall():
            totalMainMeal += each[6]
        canvas = Canvas(self.DailyTab, totalBundles=totalBundles, totalDeserts=totalDeserts, totalDrinks=totalDrinks, totalMainMeals=totalMainMeal, totalSnacks=totalSnacks)
        canvas.move(35, 45)

        #Yearly
        vad = int(currentDate[0:4])
        vad -= 1
        vad = str(vad)
        pastYearDate = vad + currentDate[4:]

        cursor.execute(
            "SELECT * FROM orders WHERE date > :date AND item_category = 'Bundles' And status = 'Confirmed'", {'date': pastYearDate}
        )
        totalBundles = 0
        for each in cursor.fetchall():
            totalBundles += each[6]
        cursor.execute(
            "SELECT * FROM orders WHERE date > :date AND item_category = 'Dessert' And status = 'Confirmed'", {'date': pastYearDate}
        )
        totalDeserts = 0
        for each in cursor.fetchall():
            totalDeserts += each[6]

        cursor.execute(
            "SELECT * FROM orders WHERE date > :date AND item_category = 'Drinks' And status = 'Confirmed'", {'date': pastYearDate}
        )
        totalDrinks = 0
        for each in cursor.fetchall():
            totalDrinks += each[6]

        cursor.execute(
            "SELECT * FROM orders WHERE date > :date AND item_category = 'Snack' And status = 'Confirmed'", {'date': pastYearDate}
        )
        totalSnacks = 0
        for each in cursor.fetchall():
            totalSnacks += each[6]

        cursor.execute(
            "SELECT * FROM orders WHERE date > :date AND item_category = 'Main Meal' And status = 'Confirmed'", {'date': pastYearDate}
        )
        totalMainMeal = 0
        for each in cursor.fetchall():
            totalMainMeal += each[6]
        canvas = Canvas(self.YearlyTab, totalBundles=totalBundles, totalDeserts=totalDeserts, totalDrinks=totalDrinks,
                        totalMainMeals=totalMainMeal, totalSnacks=totalSnacks)
        canvas.move(35, 45)

        #Weekly

        if int(currentDate[8:]) < 7:
            vad = "00"
        elif int(currentDate[8:]) < 10:
            vad = int(currentDate[8:]) - 7
            vad = '-0' + str(vad)
        else:
            vad = int(currentDate[8:]) - 7
            vad = '-' + str(vad)

        pastWeekDate = currentDate[0:7] + vad

        cursor.execute(
            "SELECT * FROM orders WHERE date > :date AND item_category = 'Bundles' And status = 'Confirmed'", {'date': pastWeekDate}
        )
        totalBundles = 0
        for each in cursor.fetchall():
            totalBundles += each[6]
        cursor.execute(
            "SELECT * FROM orders WHERE date > :date AND item_category = 'Dessert' And status = 'Confirmed'", {'date': pastWeekDate}
        )
        totalDeserts = 0
        for each in cursor.fetchall():
            totalDeserts += each[6]

        cursor.execute(
            "SELECT * FROM orders WHERE date > :date AND item_category = 'Drinks' And status = 'Confirmed'", {'date': pastWeekDate}
        )
        totalDrinks = 0
        for each in cursor.fetchall():
            totalDrinks += each[6]

        cursor.execute(
            "SELECT * FROM orders WHERE date > :date AND item_category = 'Snack' And status = 'Confirmed'", {'date': pastWeekDate}
        )
        totalSnacks = 0
        for each in cursor.fetchall():
            totalSnacks += each[6]

        cursor.execute(
            "SELECT * FROM orders WHERE date > :date AND item_category = 'Main Meal' And status = 'Confirmed'", {'date': pastWeekDate}
        )
        totalMainMeal = 0
        for each in cursor.fetchall():
            totalMainMeal += each[6]
        canvas = Canvas(self.WeeklyTab, totalBundles=totalBundles, totalDeserts=totalDeserts, totalDrinks=totalDrinks,
                        totalMainMeals=totalMainMeal, totalSnacks=totalSnacks)
        canvas.move(35, 45)


        #Weekly

        if int(currentDate[5:7]) == 1:
            vad = "01"
        elif int(currentDate[5:7]) < 10:
            vad = int(currentDate[5:7]) - 1
            vad = '0' + str(vad)
        else:
            vad = int(currentDate[5:7]) - 1
            vad = str(vad)

        pastMonthDate = currentDate[0:4] + '-' + vad + '-' + currentDate[8:]

        cursor.execute(
            "SELECT * FROM orders WHERE date > :date AND item_category = 'Bundles' And status = 'Confirmed'", {'date': pastMonthDate}
        )
        totalBundles = 0
        for each in cursor.fetchall():
            totalBundles += each[6]
        cursor.execute(
            "SELECT * FROM orders WHERE date > :date AND item_category = 'Dessert' And status = 'Confirmed'", {'date': pastMonthDate}
        )
        totalDeserts = 0
        for each in cursor.fetchall():
            totalDeserts += each[6]

        cursor.execute(
            "SELECT * FROM orders WHERE date > :date AND item_category = 'Drinks' And status = 'Confirmed'", {'date': pastMonthDate}
        )
        totalDrinks = 0
        for each in cursor.fetchall():
            totalDrinks += each[6]

        cursor.execute(
            "SELECT * FROM orders WHERE date > :date AND item_category = 'Snack' And status = 'Confirmed'", {'date': pastMonthDate}
        )
        totalSnacks = 0
        for each in cursor.fetchall():
            totalSnacks += each[6]

        cursor.execute(
            "SELECT * FROM orders WHERE date > :date AND item_category = 'Main Meal' And status = 'Confirmed'", {'date': pastMonthDate}
        )
        totalMainMeal = 0
        for each in cursor.fetchall():
            totalMainMeal += each[6]

        canvas = Canvas(self.MonthlyTab, totalBundles=totalBundles, totalDeserts=totalDeserts, totalDrinks=totalDrinks,
                        totalMainMeals=totalMainMeal, totalSnacks=totalSnacks)
        canvas.move(35, 45)

    def orderDetails(self):
        global order_id
        order_id = int(self.OrderTable.item(self.OrderTable.currentRow(), 0).text())

        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_OrderDetails()
        self.ui.setupUi(self.window)
        self.window.show()



    def setupUi(self, AdminDashboard):
        AdminDashboard.setObjectName("AdminDashboard")
        AdminDashboard.resize(1100, 740)
        AdminDashboard.setMinimumSize(QtCore.QSize(1100, 740))
        self.centralwidget = QtWidgets.QWidget(AdminDashboard)
        self.centralwidget.setObjectName("centralwidget")
        self.BGImage = QtWidgets.QLabel(self.centralwidget)
        self.BGImage.setGeometry(QtCore.QRect(0, 0, 1100, 740))
        self.BGImage.setMinimumSize(QtCore.QSize(1100, 740))
        self.BGImage.setStyleSheet("background-image: url(:/AdminDash/img/bg/AdminDash.png);")
        self.BGImage.setText("")
        self.BGImage.setObjectName("BGImage")
        self.OrderTable = QtWidgets.QTableWidget(self.centralwidget)
        self.OrderTable.setGeometry(QtCore.QRect(160, 280, 431, 441))
        self.OrderTable.setObjectName("OrderTable")
        self.OrderTable.setColumnCount(4)
        self.OrderTable.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.OrderTable.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.OrderTable.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.OrderTable.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.OrderTable.setHorizontalHeaderItem(3, item)
        self.ChartTabs = QtWidgets.QTabWidget(self.centralwidget)
        self.ChartTabs.setGeometry(QtCore.QRect(606, 282, 420, 440))
        self.ChartTabs.setStyleSheet("QTabWidget::pane {\n"
"    border: 1px solid black;\n"
"    background: white;\n"
"}\n"
"\n"
"QTabWidget::tab-bar:top {\n"
"    top: 1px;\n"
"}\n"
"\n"
"QTabWidget::tab-bar:bottom {\n"
"    bottom: 1px;\n"
"}\n"
"\n"
"QTabWidget::tab-bar:left {\n"
"    right: 1px;\n"
"}\n"
"\n"
"QTabWidget::tab-bar:right {\n"
"    left: 1px;\n"
"}\n"
"\n"
"QTabBar::tab {\n"
"    border: 1px solid black;\n"
"}\n"
"\n"
"QTabBar::tab:selected {\n"
"    background: #F25234;\n"
"    color: white;\n"
"}\n"
"\n"
"QTabBar::tab:!selected {\n"
"    background: #FF9A00;\n"
"    color: white;\n"
"}\n"
"\n"
"QTabBar::tab:!selected:hover {\n"
"    background: #48C0A8;\n"
"    color: white;\n"
"}\n"
"\n"
"QTabBar::tab:top:!selected {\n"
"    margin-top: 3px;\n"
"}\n"
"\n"
"QTabBar::tab:bottom:!selected {\n"
"    margin-bottom: 3px;\n"
"}\n"
"\n"
"QTabBar::tab:top, QTabBar::tab:bottom {\n"
"    min-width: 8ex;\n"
"    margin-right: -1px;\n"
"    padding: 5px 10px 5px 10px;\n"
"}\n"
"\n"
"QTabBar::tab:top:selected {\n"
"    border-bottom-color: none;\n"
"}\n"
"\n"
"QTabBar::tab:bottom:selected {\n"
"    border-top-color: none;\n"
"}\n"
"\n"
"QTabBar::tab:top:last, QTabBar::tab:bottom:last,\n"
"QTabBar::tab:top:only-one, QTabBar::tab:bottom:only-one {\n"
"    margin-right: 0;\n"
"}\n"
"\n"
"QTabBar::tab:left:!selected {\n"
"    margin-right: 3px;\n"
"}\n"
"\n"
"QTabBar::tab:right:!selected {\n"
"    margin-left: 3px;\n"
"}\n"
"\n"
"QTabBar::tab:left, QTabBar::tab:right {\n"
"    min-height: 8ex;\n"
"    margin-bottom: -1px;\n"
"    padding: 10px 5px 10px 5px;\n"
"}\n"
"\n"
"QTabBar::tab:left:selected {\n"
"    border-left-color: none;\n"
"}\n"
"\n"
"QTabBar::tab:right:selected {\n"
"    border-right-color: none;\n"
"}\n"
"\n"
"QTabBar::tab:left:last, QTabBar::tab:right:last,\n"
"QTabBar::tab:left:only-one, QTabBar::tab:right:only-one {\n"
"    margin-bottom: 0;\n"
"}")
        self.ChartTabs.setTabPosition(QtWidgets.QTabWidget.West)
        self.ChartTabs.setIconSize(QtCore.QSize(50, 50))
        self.ChartTabs.setObjectName("ChartTabs")
        self.DailyTab = QtWidgets.QWidget()
        self.DailyTab.setObjectName("DailyTab")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.DailyTab)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(0, 0, 391, 471))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.VLayoutDaily = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.VLayoutDaily.setContentsMargins(0, 0, 0, 0)
        self.VLayoutDaily.setObjectName("VLayoutDaily")
        self.DailyChart = QtWidgets.QWidget(self.verticalLayoutWidget)
        self.DailyChart.setObjectName("DailyChart")
        self.VLayoutDaily.addWidget(self.DailyChart)
        self.ChartTabs.addTab(self.DailyTab, "")
        self.WeeklyTab = QtWidgets.QWidget()
        self.WeeklyTab.setObjectName("WeeklyTab")
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.WeeklyTab)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(0, 0, 391, 471))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.VLayoutWeekly = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.VLayoutWeekly.setContentsMargins(0, 0, 0, 0)
        self.VLayoutWeekly.setObjectName("VLayoutWeekly")
        self.WeeklyChart = QtWidgets.QWidget(self.verticalLayoutWidget_2)
        self.WeeklyChart.setObjectName("WeeklyChart")
        self.VLayoutWeekly.addWidget(self.WeeklyChart)
        self.ChartTabs.addTab(self.WeeklyTab, "")
        self.MonthlyTab = QtWidgets.QWidget()
        self.MonthlyTab.setObjectName("MonthlyTab")
        self.verticalLayoutWidget_3 = QtWidgets.QWidget(self.MonthlyTab)
        self.verticalLayoutWidget_3.setGeometry(QtCore.QRect(0, 0, 391, 461))
        self.verticalLayoutWidget_3.setObjectName("verticalLayoutWidget_3")
        self.VLayoutMonthly = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_3)
        self.VLayoutMonthly.setContentsMargins(0, 0, 0, 0)
        self.VLayoutMonthly.setObjectName("VLayoutMonthly")
        self.MonthlyChart = QtWidgets.QWidget(self.verticalLayoutWidget_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.MonthlyChart.sizePolicy().hasHeightForWidth())
        self.MonthlyChart.setSizePolicy(sizePolicy)
        self.MonthlyChart.setObjectName("MonthlyChart")
        self.VLayoutMonthly.addWidget(self.MonthlyChart)
        self.ChartTabs.addTab(self.MonthlyTab, "")
        self.YearlyTab = QtWidgets.QWidget()
        self.YearlyTab.setObjectName("YearlyTab")
        self.verticalLayoutWidget_4 = QtWidgets.QWidget(self.YearlyTab)
        self.verticalLayoutWidget_4.setGeometry(QtCore.QRect(0, 0, 391, 471))
        self.verticalLayoutWidget_4.setObjectName("verticalLayoutWidget_4")
        self.VLayoutYearly = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_4)
        self.VLayoutYearly.setContentsMargins(0, 0, 0, 0)
        self.VLayoutYearly.setObjectName("VLayoutYearly")
        self.YearlyChart = QtWidgets.QWidget(self.verticalLayoutWidget_4)
        self.YearlyChart.setObjectName("YearlyChart")
        self.VLayoutYearly.addWidget(self.YearlyChart)
        self.ChartTabs.addTab(self.YearlyTab, "")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(453, 210, 141, 31))
        self.pushButton.setStyleSheet("QPushButton {\n"
"background-color: #FF9A00;\n"
"font: 63 13pt \"Segoe UI Semibold\";\n"
"color: rgb(255, 255, 255);\n"
"border-color: rgb(255, 255, 255);\n"
"}")
        self.pushButton.setObjectName("pushButton")
        self.StaffBtn = QtWidgets.QPushButton(self.centralwidget)
        self.StaffBtn.setGeometry(QtCore.QRect(44, 250, 61, 51))
        self.StaffBtn.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/Icons/img/Staff.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.StaffBtn.setIcon(icon)
        self.StaffBtn.setIconSize(QtCore.QSize(50, 50))
        self.StaffBtn.setFlat(True)
        self.StaffBtn.setObjectName("StaffBtn")
        self.UserBtn = QtWidgets.QPushButton(self.centralwidget)
        self.UserBtn.setGeometry(QtCore.QRect(44, 425, 61, 51))
        self.UserBtn.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/Icons/img/User.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.UserBtn.setIcon(icon1)
        self.UserBtn.setIconSize(QtCore.QSize(55, 55))
        self.UserBtn.setFlat(True)
        self.UserBtn.setObjectName("UserBtn")
        self.LogoutBtn = QtWidgets.QPushButton(self.centralwidget)
        self.LogoutBtn.setGeometry(QtCore.QRect(44, 587, 61, 51))
        self.LogoutBtn.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/Icons/img/Logout.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.LogoutBtn.setIcon(icon2)
        self.LogoutBtn.setIconSize(QtCore.QSize(45, 45))
        self.LogoutBtn.setFlat(True)
        self.LogoutBtn.setObjectName("LogoutBtn")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(450, 250, 141, 31))
        self.pushButton_2.setStyleSheet("QPushButton {\n"
"background-color: #FF9A00;\n"
"font: 63 13pt \"Segoe UI Semibold\";\n"
"color: rgb(255, 255, 255);\n"
"border-color: rgb(255, 255, 255);\n"
"}")
        self.pushButton_2.setObjectName("pushButton_2")
        AdminDashboard.setCentralWidget(self.centralwidget)

        self.retranslateUi(AdminDashboard)
        self.ChartTabs.setCurrentIndex(3)
        QtCore.QMetaObject.connectSlotsByName(AdminDashboard)
        self.loadData()
        self.dataVisualization()
        self.pushButton.clicked.connect(self.logistics)
        self.pushButton_2.clicked.connect(self.orderDetails)
        self.StaffBtn.clicked.connect(self.switchtostaffwindow)
        self.LogoutBtn.clicked.connect(self.logout)

    def switchtostaffwindow(self):
        ManagStaffWindow.show()

    def logout(self):
        LoginWindow.show()
        AdminDashboard.hide()

    def retranslateUi(self, AdminDashboard):
        _translate = QtCore.QCoreApplication.translate
        AdminDashboard.setWindowTitle(_translate("AdminDashboard", "MainWindow"))
        item = self.OrderTable.horizontalHeaderItem(0)
        item.setText(_translate("AdminDashboard", "Order Number"))
        item = self.OrderTable.horizontalHeaderItem(1)
        item.setText(_translate("AdminDashboard", "Order Date"))
        item = self.OrderTable.horizontalHeaderItem(2)
        item.setText(_translate("AdminDashboard", "Total Items"))
        item = self.OrderTable.horizontalHeaderItem(3)
        item.setText(_translate("AdminDashboard", "Total (tax Inc.)"))
        self.ChartTabs.setTabText(self.ChartTabs.indexOf(self.DailyTab), _translate("AdminDashboard", "Daily"))
        self.ChartTabs.setTabText(self.ChartTabs.indexOf(self.WeeklyTab), _translate("AdminDashboard", "Weekly"))
        self.ChartTabs.setTabText(self.ChartTabs.indexOf(self.MonthlyTab), _translate("AdminDashboard", "Monthly"))
        self.ChartTabs.setTabText(self.ChartTabs.indexOf(self.YearlyTab), _translate("AdminDashboard", "Yearly"))
        self.pushButton.setText(_translate("AdminDashboard", "Logistics Report"))
        self.LogoutBtn.setShortcut(_translate("AdminDashboard", "Ctrl+S"))
        self.pushButton_2.setText(_translate("AdminDashboard", "View Order Content"))


import background_rc

















class Ui_OrderDetails(object):
    global order_id
    def Database(self):
        global conn, cursor
        conn = sqlite3.connect("projectdb.db")
        cursor = conn.cursor()
        cursor.execute(
            "CREATE TABLE IF NOT EXISTS `staff` (staff_id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, staff_username TEXT, staff_password TEXT, firstName TEXT, lastName TEXT, email TEXT)")
        cursor.execute(
            "CREATE TABLE IF NOT EXISTS 'orders' (order_number INTEGER, staff_id INTEGER, item_name TEXT, item_price INTEGER, item_tax float(4,2), item_category TEXT, item_quantity INTEGER, status TEXT, date DATE, PRIMARY KEY(order_number, item_name))"
        )
        cursor.execute(
            "CREATE TABLE IF NOT EXISTS `admin` (admin_id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, admin_username TEXT, admin_password TEXT)")

        cursor.execute("SELECT * FROM `admin` WHERE `admin_username` = 'admin' AND `admin_password` = 'admin'")
        if cursor.fetchone() is None:
            cursor.execute("INSERT INTO `admin` (admin_username, admin_password) VALUES('admin', 'admin')")
            conn.commit()
        cursor.execute("SELECT * FROM `staff`")
        if cursor.fetchone() is None:
            cursor.execute(
                "INSERT INTO `staff` (staff_username, staff_password, firstName, lastName, email) VALUES('FS', 'FS', 'FS', 'FS', 'FS')")
            conn.commit()

    def loadData(self):
        global order_id
        print(order_id)
        currentOrderCounter = 0
        self.Database()
        cursor.execute(
            "SELECT * FROM orders WHERE order_number = :order_number", {'order_number':order_id}
        )
        products = cursor.fetchall()
        rows = 0
        self.OrderDetailsTable.setRowCount(len(products))
        for individualProduct in products:
            self.OrderDetailsTable.setItem(rows, 0, QtWidgets.QTableWidgetItem(str(products[rows][0])))
            self.OrderDetailsTable.setItem(rows, 1, QtWidgets.QTableWidgetItem(products[rows][2]))
            self.OrderDetailsTable.setItem(rows, 2, QtWidgets.QTableWidgetItem(str(products[rows][3])))
            self.OrderDetailsTable.setItem(rows, 3, QtWidgets.QTableWidgetItem(products[rows][5]))
            self.OrderDetailsTable.setItem(rows, 4, QtWidgets.QTableWidgetItem(products[rows][4]))
            self.OrderDetailsTable.setItem(rows, 5, QtWidgets.QTableWidgetItem(str(products[rows][6])))
            tax = float(products[rows][4][0:products[rows][5].find('%')]) / 100
            totalPrice = products[rows][6] * (products[rows][3] + (products[rows][3] * tax))
            self.OrderDetailsTable.setItem(rows, 6, QtWidgets.QTableWidgetItem(str(totalPrice)))
            rows += 1
    def setupUi(self, OrderDetails):
        OrderDetails.setObjectName("OrderDetails")
        OrderDetails.resize(1100, 686)
        OrderDetails.setStyleSheet("QPushButton {\n"
"background-color:#FF9A00;\n"
"font: 63 12pt \"Segoe UI Semibold\";\n"
"color: rgb(255, 255, 255);\n"
"}")
        self.centralwidget = QtWidgets.QWidget(OrderDetails)
        self.centralwidget.setObjectName("centralwidget")
        self.BGImage = QtWidgets.QLabel(self.centralwidget)
        self.BGImage.setGeometry(QtCore.QRect(0, 0, 1100, 740))
        self.BGImage.setStyleSheet("background-image: url(:/OrderDetails/img/bg/OrderDetails.png);")
        self.BGImage.setText("")
        self.BGImage.setObjectName("BGImage")
        self.OrderDetailsTable = QtWidgets.QTableWidget(self.centralwidget)
        self.OrderDetailsTable.setGeometry(QtCore.QRect(250, 170, 601, 461))
        self.OrderDetailsTable.setObjectName("OrderDetailsTable")
        self.OrderDetailsTable.setColumnCount(7)
        self.OrderDetailsTable.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.OrderDetailsTable.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.OrderDetailsTable.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.OrderDetailsTable.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.OrderDetailsTable.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.OrderDetailsTable.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.OrderDetailsTable.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.OrderDetailsTable.setHorizontalHeaderItem(6, item)
        OrderDetails.setCentralWidget(self.centralwidget)

        self.retranslateUi(OrderDetails)
        QtCore.QMetaObject.connectSlotsByName(OrderDetails)
        self.loadData()

    def retranslateUi(self, OrderDetails):
        _translate = QtCore.QCoreApplication.translate
        OrderDetails.setWindowTitle(_translate("OrderDetails", "MainWindow"))
        item = self.OrderDetailsTable.horizontalHeaderItem(0)
        item.setText(_translate("OrderDetails", "Order Number"))
        item = self.OrderDetailsTable.horizontalHeaderItem(1)
        item.setText(_translate("OrderDetails", "Item Name"))
        item = self.OrderDetailsTable.horizontalHeaderItem(2)
        item.setText(_translate("OrderDetails", "Item Price"))
        item = self.OrderDetailsTable.horizontalHeaderItem(3)
        item.setText(_translate("OrderDetails", "Item Category"))
        item = self.OrderDetailsTable.horizontalHeaderItem(4)
        item.setText(_translate("OrderDetails", "Item Tax"))
        item = self.OrderDetailsTable.horizontalHeaderItem(5)
        item.setText(_translate("OrderDetails", "Quantity"))
        item = self.OrderDetailsTable.horizontalHeaderItem(6)
        item.setText(_translate("OrderDetails", "Price(tax)"))














#this class should be replaced
class Ui_OrderConfirmation(object):
    def logout(self):
        OrderConfirmation.hide()
        LoginWindow.show()
    def confirm(self):
        global dataset
        self.Database()
        if len(dataset) != 0:
            orderNumber = int(self.StaffTable.item(0, 0).text())
            cursor.execute(
                "UPDATE orders SET status = 'Confirmed' WHERE order_number = :order_number",
                {'order_number': orderNumber}
            )
            qm = QMessageBox()
            qm.setText("Order confirmed")
            qm.exec()
            self.next()
        else:
            qm = QMessageBox()
            qm.setText("There are no orders in queue!")
            qm.exec()
        conn.commit()

    def reject(self):
        global dataset
        self.Database()
        if len(dataset) != 0:
            orderNumber = int(self.StaffTable.item(0, 0).text())
            cursor.execute(
                "UPDATE orders SET status = 'Rejected' WHERE order_number = :order_number",
                {'order_number': orderNumber}
            )
            qm = QMessageBox()
            qm.setText("Order Rejected")
            qm.exec()
            self.next()
        else:
            qm = QMessageBox()
            qm.setText("There are no orders in queue!")
            qm.exec()
        conn.commit()

    def Database(self):
        global conn, cursor
        conn = sqlite3.connect("projectdb.db")
        cursor = conn.cursor()
        cursor.execute(
            "CREATE TABLE IF NOT EXISTS `staff` (staff_id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, staff_username TEXT, staff_password TEXT, firstName TEXT, lastName TEXT, email TEXT)")
        cursor.execute(
            "CREATE TABLE IF NOT EXISTS 'orders' (order_number INTEGER, staff_id INTEGER, item_name TEXT, item_price INTEGER, item_tax float(4,2), item_category TEXT, item_quantity INTEGER, status TEXT, date DATE, PRIMARY KEY(order_number, item_name))"
        )
        cursor.execute(
            "CREATE TABLE IF NOT EXISTS `admin` (admin_id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, admin_username TEXT, admin_password TEXT)")

        cursor.execute("SELECT * FROM `admin` WHERE `admin_username` = 'admin' AND `admin_password` = 'admin'")
        if cursor.fetchone() is None:
            cursor.execute("INSERT INTO `admin` (admin_username, admin_password) VALUES('admin', 'admin')")
            conn.commit()
        cursor.execute("SELECT * FROM `staff`")
        if cursor.fetchone() is None:
            cursor.execute(
                "INSERT INTO `staff` (staff_username, staff_password, firstName, lastName, email) VALUES('FS', 'FS', 'FS', 'FS', 'FS')")
            conn.commit()

    def loadData(self):
        global currentOrder, maxLimit, dataset, currentOrderCounter
        currentOrderCounter = 0
        self.Database()
        cursor.execute(
            "SELECT DISTINCT order_number FROM orders WHERE status ='Pending'"
        )
        dataset = cursor.fetchall()
        cursor.execute(
            "SELECT * FROM orders"
        )
        for each in cursor.fetchall():
            if len(dataset) != 0:
                currentOrder = dataset[currentOrderCounter][0]
                maxLimit = len(dataset)
            if len(dataset) == 0:

                print("There are no pending orders in queue!")

            else:
                cursor.execute(
                    "SELECT * FROM orders WHERE order_number = :order_number AND status = 'Pending'",
                    {'order_number': currentOrder})
                products = cursor.fetchall()
                rows = 0
                self.StaffTable.setRowCount(len(products))
                for individualProduct in products:
                    self.StaffTable.setItem(rows, 0, QtWidgets.QTableWidgetItem(str(products[rows][0])))
                    self.StaffTable.setItem(rows, 1, QtWidgets.QTableWidgetItem(products[rows][2]))
                    self.StaffTable.setItem(rows, 2, QtWidgets.QTableWidgetItem(str(products[rows][3])))
                    self.StaffTable.setItem(rows, 3, QtWidgets.QTableWidgetItem(products[rows][5]))
                    self.StaffTable.setItem(rows, 4, QtWidgets.QTableWidgetItem(products[rows][4]))
                    self.StaffTable.setItem(rows, 5, QtWidgets.QTableWidgetItem(str(products[rows][6])))
                    tax = float(products[rows][4][0:products[rows][5].find('%')]) / 100
                    totalPrice = products[rows][6] * (products[rows][3] + (products[rows][3] * tax))
                    self.StaffTable.setItem(rows, 6, QtWidgets.QTableWidgetItem(str(totalPrice)))
                    rows += 1
        else:
            print("no data in queue")
        conn.commit()
    def next(self):
        global currentOrder, maxLimit, dataset, currentOrderCounter
        cursor.execute(
            "SELECT DISTINCT order_number FROM orders WHERE status ='Pending'"
        )
        dataset = cursor.fetchall()

        maxLimit = len(dataset) - 1
        if len(dataset) != 0:
            if currentOrderCounter >= maxLimit:
                currentOrderCounter = -1
            currentOrderCounter = currentOrderCounter + 1
            currentOrder = dataset[currentOrderCounter][0]

            cursor.execute(
                "SELECT * FROM orders WHERE order_number = :order_number AND status = 'Pending'", {'order_number': currentOrder})
            products = cursor.fetchall()
            cursor.execute(
                "SELECT * FROM orders"
            )
            print(cursor.fetchall())
            rows = 0
            self.StaffTable.setRowCount(len(products))
            for individualProduct in products:
                self.StaffTable.setItem(rows, 0, QtWidgets.QTableWidgetItem(str(products[rows][0])))
                self.StaffTable.setItem(rows, 1, QtWidgets.QTableWidgetItem(products[rows][2]))
                self.StaffTable.setItem(rows, 2, QtWidgets.QTableWidgetItem(str(products[rows][3])))
                self.StaffTable.setItem(rows, 3, QtWidgets.QTableWidgetItem(products[rows][5]))
                self.StaffTable.setItem(rows, 4, QtWidgets.QTableWidgetItem(products[rows][4]))
                self.StaffTable.setItem(rows, 5, QtWidgets.QTableWidgetItem(str(products[rows][6])))
                tax = float(products[rows][4][0:products[rows][5].find('%')]) / 100
                totalPrice = products[rows][6] * (products[rows][3] + (products[rows][3] * tax))
                self.StaffTable.setItem(rows, 6, QtWidgets.QTableWidgetItem(str(totalPrice)))
                rows += 1
        else:
            self.StaffTable.setRowCount(0)
            qm = QMessageBox()
            qm.setText("There are no orders in queue!")
            qm.exec()
        conn.commit()
    def setupUi(self, OrderConfirmation):
        OrderConfirmation.setObjectName("OrderConfirmation")
        OrderConfirmation.resize(1101, 740)
        OrderConfirmation.setStyleSheet("QPushButton {\n"
"background-color: #FF9A00;\n"
"font: 63 12pt \"Segoe UI Semibold\";\n"
"color: rgb(255, 255, 255);\n"
"border-color: rgb(255, 255, 255);\n"
"}")
        self.centralwidget = QtWidgets.QWidget(OrderConfirmation)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(240, 180, 701, 511))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.VTLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.VTLayout.setContentsMargins(0, 0, 0, 0)
        self.VTLayout.setObjectName("VTLayout")
        self.StaffTable = QtWidgets.QTableWidget(self.verticalLayoutWidget)
        self.StaffTable.setStyleSheet("\n"
"QHeaderView // The entire area of ​​the QTableWidget header\n"
"{\n"
" Background:transparent; // The background color of the entire title header area\n"
"}\n"
"QHeaderView::section // Title header Each individual title area\n"
"{\n"
" Font-size:14px; // The font size of each title\n"
" Font-family: \"Microsoft YaHei\"; // Font type of each title\n"
" Color: #FFFFFF; // The font color of each title\n"
" \n"
" Background:#60669B; // Background color of each title area\n"
"Border:none; // The border of each title area\n"
" Text-align:left; // Alignment of each title (seemingly unusable). It is recommended to use tableWidget->horizontalHeader()->setDefaultAlignment(Qt::AlignLeft | Qt::AlignVCenter)\n"
" \n"
" \n"
" Min-height: 49px; // height of the title area\n"
"    max-height:49px;               //\n"
" \n"
" Margin-left:0px; // The margin of each title area\n"
" Padding-left: 0px; padding for each title area\n"
"}\n"
" \n"
"QTableWidget // The entire table widget\n"
"{\n"
" Background: #FFFFFF; // The background color of the entire table control\n"
" Border:none; // The entire table control border\n"
" \n"
" Font-size: 12px; // All font sizes\n"
" Font-family:\"Microsoft YaHei\"; // All fonts family\n"
" Color:#666666; // All font colors\n"
"}\n"
" \n"
"QTableWidget:: item // each cell\n"
"{\n"
" Border-bottom:1px solid #EEF1F7; // Only display the bottom border of each cell\n"
"}\n"
" \n"
"QTableWidget::item::selected // Each cell is selected\n"
"{\n"
" Color:red; font color when each cell is selected\n"
" Background: #EFF4FF; background color when each cell is selected\n"
"}\n"
" \n"
"QScrollBar::handle:vertical // Vertical scroll bar handle\n"
"{\n"
" Background: rgba(255,255,255,20%); // background color of vertical scroll bar handle\n"
" Border: 0px solid grey; // Vertical scroll bar handle border\n"
" Border-radius: 3px; // Vertical scroll bar handle rounded corners\n"
" Width: 8px; // Vertical scroll bar handle width\n"
"}\n"
"QScrollBar::vertical // Vertical scroll bar area\n"
"{\n"
" Border-width: 1px; // Vertical scroll bar area Border width\n"
" Border-style: solid; // Vertical scroll bar area Border type\n"
" Border-color: rgba(255, 255, 255, 10%); // Vertical scroll bar area border color\n"
" Width: 8px; Width of vertical scroll bar area\n"
" Margin:0px 0px 0px 0px; // Vertical scroll bar area margin\n"
" Border-radius: 3px; // Vertical scroll bar area rounded corners\n"
"}\n"
"QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical // vertical scroll bar handle upper and lower area (area not occupied by handle)\n"
"{\n"
" Background: rgba(255,255,255,10%); // Background color of the upper and lower areas of the vertical scroll bar handle\n"
"}\n"
"QScollBar::add-line:vertical, QScrollBar::sub-line:vertical // The top and bottom areas of the vertical scroll bar\n"
"{\n"
" Background:transparent; background color of the top and bottom areas of the vertical scroll bar\n"
"}")
        self.StaffTable.setObjectName("StaffTable")
        self.StaffTable.setColumnCount(7)
        self.StaffTable.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.StaffTable.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.StaffTable.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.StaffTable.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.StaffTable.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.StaffTable.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.StaffTable.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.StaffTable.setHorizontalHeaderItem(6, item)
        self.VTLayout.addWidget(self.StaffTable)
        spacerItem = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.VTLayout.addItem(spacerItem)
        self.HZLayout = QtWidgets.QHBoxLayout()
        self.HZLayout.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.HZLayout.setSpacing(20)
        self.HZLayout.setObjectName("HZLayout")
        self.AddBtn = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.AddBtn.setMinimumSize(QtCore.QSize(0, 40))
        self.AddBtn.setObjectName("AddBtn")
        self.HZLayout.addWidget(self.AddBtn)
        self.EditBtn = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.EditBtn.setMinimumSize(QtCore.QSize(0, 40))
        self.EditBtn.setObjectName("EditBtn")
        self.HZLayout.addWidget(self.EditBtn)
        self.RefreshBtn = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.RefreshBtn.setMinimumSize(QtCore.QSize(0, 40))
        self.RefreshBtn.setObjectName("RefreshBtn")
        self.HZLayout.addWidget(self.RefreshBtn)
        self.DeleteBtn = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.DeleteBtn.setMinimumSize(QtCore.QSize(0, 40))
        self.DeleteBtn.setObjectName("DeleteBtn")
        self.HZLayout.addWidget(self.DeleteBtn)
        self.VTLayout.addLayout(self.HZLayout)
        self.BGImage = QtWidgets.QLabel(self.centralwidget)
        self.BGImage.setGeometry(QtCore.QRect(0, 0, 1100, 740))
        self.BGImage.setStyleSheet("background-image: url(:/ManageStaffBG/img/bg/ManageStaff.png);")
        self.BGImage.setText("")
        self.BGImage.setObjectName("BGImage")
        self.BGImage.raise_()
        self.verticalLayoutWidget.raise_()
        OrderConfirmation.setCentralWidget(self.centralwidget)

        self.retranslateUi(OrderConfirmation)
        QtCore.QMetaObject.connectSlotsByName(OrderConfirmation)
        self.loadData()
        self.DeleteBtn.clicked.connect(self.next)
        self.AddBtn.clicked.connect(self.confirm)
        self.EditBtn.clicked.connect(self.reject)
        self.RefreshBtn.clicked.connect(self.logout)


    def retranslateUi(self, OrderConfirmation):
        _translate = QtCore.QCoreApplication.translate
        OrderConfirmation.setWindowTitle(_translate("OrderConfirmation", "MainWindow"))
        item = self.StaffTable.horizontalHeaderItem(0)
        item.setText(_translate("OrderConfirmation", "Order Number"))
        item = self.StaffTable.horizontalHeaderItem(1)
        item.setText(_translate("OrderConfirmation", "Item Name"))
        item = self.StaffTable.horizontalHeaderItem(2)
        item.setText(_translate("OrderConfirmation", "Item Price"))
        item = self.StaffTable.horizontalHeaderItem(3)
        item.setText(_translate("OrderConfirmation", "Item Category"))
        item = self.StaffTable.horizontalHeaderItem(4)
        item.setText(_translate("OrderConfirmation", "Item Taxes"))
        item = self.StaffTable.horizontalHeaderItem(5)
        item.setText(_translate("OrderConfirmation", "Item Quantity"))
        item = self.StaffTable.horizontalHeaderItem(6)
        item.setText(_translate("OrderConfirmation", "Price (taxes)"))
        self.AddBtn.setText(_translate("OrderConfirmation", "Confirm Order"))
        self.EditBtn.setText(_translate("OrderConfirmation", "Reject Order"))
        self.RefreshBtn.setText(_translate("OrderConfirmation", "Logout"))
        self.DeleteBtn.setText(_translate("OrderConfirmation", "Skip Order"))


import background_rc




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    AddStaffWindow = QtWidgets.QMainWindow()
    AddStaffWindow_ui = Ui_AddStaffWindow()
    AddStaffWindow_ui.setupUi(AddStaffWindow)
    # AddStaffWindow.show()
    # sys.exit(app.exec_())
    #
    # app = QtWidgets.QApplication(sys.argv)
    ManagStaffWindow = QtWidgets.QMainWindow()
    ManagStaffWindow_ui = Ui_ManagStaffWindow()
    ManagStaffWindow_ui.setupUi(ManagStaffWindow)
    # ManagStaffWindow.show()
    # sys.exit(app.exec_())

    # app = QtWidgets.QApplication(sys.argv)
    LoginWindow = QtWidgets.QMainWindow()
    LoginWindow_ui = Ui_LoginWindow()
    LoginWindow_ui.setupUi(LoginWindow)
    LoginWindow.show()
    # sys.exit(app.exec_())

    # app = QtWidgets.QApplication(sys.argv)
    OrderPage = QtWidgets.QMainWindow()
    OrderPage_ui = Ui_OrderPage()
    OrderPage_ui.setupUi(OrderPage)
    # OrderPage.show()
    # sys.exit(app.exec_())

    # app = QtWidgets.QApplication(sys.argv)
    AdminDashboard = QtWidgets.QMainWindow()
    AdminDashboard_ui = Ui_AdminDashboard()
    AdminDashboard_ui.setupUi(AdminDashboard)
    # AdminDashboard.show()
    # sys.exit(app.exec_())


    # app = QtWidgets.QApplication(sys.argv)
    OrderConfirmation = QtWidgets.QMainWindow()
    OrderConfirmation_ui = Ui_OrderConfirmation()
    OrderConfirmation_ui.setupUi(OrderConfirmation)
    # OrderConfirmation.show()
    sys.exit(app.exec_())


